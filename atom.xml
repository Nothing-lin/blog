<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Nothinglin的个人博客</title>
  
  <subtitle>NothingLin</subtitle>
  <link href="https://www.nothinglin.ml/atom.xml" rel="self"/>
  
  <link href="https://www.nothinglin.ml/"/>
  <updated>2022-01-14T16:15:38.665Z</updated>
  <id>https://www.nothinglin.ml/</id>
  
  <author>
    <name>NothingLin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>编程 | SSM基础入门</title>
    <link href="https://www.nothinglin.ml/2022/01/13/%E7%BC%96%E7%A8%8B-SSM%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
    <id>https://www.nothinglin.ml/2022/01/13/%E7%BC%96%E7%A8%8B-SSM%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/</id>
    <published>2022-01-13T11:39:18.000Z</published>
    <updated>2022-01-14T16:15:38.665Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本篇文章是我的SSM框架入门笔记，笔记内容基于黑马程序员的课程内容：<a href="https://www.bilibili.com/video/BV1WZ4y1P7Bp?p=35&spm_id_from=pageDriver">点击打开</a></p></blockquote><h1 id="Spring-简介"><a href="#Spring-简介" class="headerlink" title="Spring 简介"></a>Spring 简介</h1><p>Spring是分层的Java SE、EE 应用的全栈轻量级开源框架，以IoC（inverse Of Control：控制反转）和AOP（Aspect OrientedProgramming：面向切面编程）为内核。</p><p>提供了<strong>视图层SpringMVC、持久层Spring JDBCTemplate以及业务层事务管理</strong>等众多的企业级应用技术，还能整合开源世界众多著名的第三方框架和类库，逐渐称为使用最多的Java EE企业应用开源框架。</p><blockquote><p>这句话视频里抄下来的，我现在还不懂这是什么意思。</p></blockquote><h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><h3 id="方便解耦、简化开发："><a href="#方便解耦、简化开发：" class="headerlink" title="方便解耦、简化开发："></a>方便解耦、简化开发：</h3><p>通过Spring提供的IoC容器，可以将对象间的依赖关系交由Spring惊醒控制，避免硬编码所造成的过度耦合。用户也不必再为单例模式类、属性文件解析等这些很底层的需求编写代码，可以更专注于上层应用。</p><h3 id="AOP编程的支持："><a href="#AOP编程的支持：" class="headerlink" title="AOP编程的支持："></a>AOP编程的支持：</h3><p>通过Spring的AOP功能，方便进行面向切面编程，许多不容易用创痛OOP实现的功能都可以通过AOP实现。</p><blockquote><p>这个听抽象的，我的水平还不够去理解！</p></blockquote><h3 id="声明式事务的支持："><a href="#声明式事务的支持：" class="headerlink" title="声明式事务的支持："></a>声明式事务的支持：</h3><p>可以将我们从单调烦闷的事务管理代码中解脱出来，通过声明式方式灵活的进行事务管理，提高开发效率和质量。</p><h3 id="方便程序的测试："><a href="#方便程序的测试：" class="headerlink" title="方便程序的测试："></a>方便程序的测试：</h3><p>可以用非容器依赖的编程方式进行几乎所有的测试工作，测试不再是昂贵的操作，而是随手可做的事情。</p><h3 id="方便集成各种优秀框架："><a href="#方便集成各种优秀框架：" class="headerlink" title="方便集成各种优秀框架："></a>方便集成各种优秀框架：</h3><p>Spring对各种优秀框架（Struts、Hibernate、Hessian、Quartz）的支持。</p><h3 id="降低JavaEE-API的使用难度："><a href="#降低JavaEE-API的使用难度：" class="headerlink" title="降低JavaEE API的使用难度："></a>降低JavaEE API的使用难度：</h3><p>Spring对JavaEE API（如JDBC、JavaMail、远程调用等）进行了薄薄的封装层，使这些API的使用难度大为降低。</p><h2 id="Spring体系结构"><a href="#Spring体系结构" class="headerlink" title="Spring体系结构"></a>Spring体系结构</h2><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2022/1/14/20220114015353.png" alt="image-20220113200301349"></p><p>简单对比一下 javaweb 和 spring 的用法。</p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2022/1/14/20220114015358.png" alt="image-20220113200749395"></p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2022/1/14/20220114015402.png" alt="image-20220113200833283"></p><h2 id="Spring开发步骤"><a href="#Spring开发步骤" class="headerlink" title="Spring开发步骤"></a>Spring开发步骤</h2><ul><li>导入Spring开发包</li><li>编写Dao接口和实现类</li><li>创建Spring核心配置文件</li><li>在Spring配置文件中配置UserDaoImpl接口实现类</li><li>使用Spring的API获得Bean实例</li></ul><p><strong>导入Spring开发包</strong></p><pre data-enlighter-language="xml">//pom.xml文件<dependencies>    <dependency>        <groupId>org.springframework</groupId>        <artifactId>spring-context</artifactId>        <version>5.0.5.RELEASE</version>    </dependency></dependencies></pre><h2 id="简单的Spring程序"><a href="#简单的Spring程序" class="headerlink" title="简单的Spring程序"></a>简单的Spring程序</h2><pre data-enlighter-language="txt">Spring ├─.idea│      └─spring_ioc    │  pom.xml    │  spring_ioc.iml    │      └─src        ├─main        │  ├─java        │  └─resources        └─test            └─java</pre><blockquote><p>上面个是项目的基本结构，下面的相关代码，按顺序操作。</p></blockquote><pre data-enlighter-language="xml">//pom.xml<dependencies>    <dependency>        <groupId>org.springframework</groupId>        <artifactId>spring-context</artifactId>        <version>5.0.5.RELEASE</version>    </dependency>  <dependency>     <groupId>junit</groupId>     <artifactId>junit</artifactId>     <version>4.12</version>     <scope>test</scope>  </dependency></dependencies></pre><pre data-enlighter-language="java">//UserDao.javapackage com.nothinglin.dao;public interface UserDao {    public void save();}</pre><pre data-enlighter-language="java">//UserDaoImpl.javapackage com.nothinglin.dao.impl;import com.nothinglin.dao.UserDao;public class UserDaoImpl implements UserDao {    //这里没写，实际有一个无参构造器    public void save(){        System.out.println("save running...");    }}</pre><pre data-enlighter-language="xml">//applicationContext.xml<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd"><beans>    <bean id="userDao" class="com.nothinglin.dao.impl.UserDaoImpl"></bean></beans></pre><pre data-enlighter-language="java">//firstSpringTest.javapublic class firstSpring {    public static void main(String[] args) {        //加载Spring配置文件        ApplicationContext app = new ClassPathXmlApplicationContext("applicationContext.xml");        //获取Spring容器中对应id下的内容        UserDao userDao = (UserDao)app.getBean("userDao");        //调用目标对象的方法        userDao.save();    }}</pre><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2022/1/14/20220114015408.png" alt="image-20220113200833283"></p><h1 id="SpringXML配置文件"><a href="#SpringXML配置文件" class="headerlink" title="SpringXML配置文件"></a>SpringXML配置文件</h1><h2 id="Bean标签基本配置"><a href="#Bean标签基本配置" class="headerlink" title="Bean标签基本配置"></a>Bean标签基本配置</h2><blockquote><p><strong>基本属性：</strong></p><p><strong>id</strong>：Bean实例在Spring容器中的唯一标识</p><p><strong>class</strong>：Bean的全限定名称</p><p><strong>scope</strong>：指对象的作用范围（<strong>singleton、prototype、request、session、global session</strong>）</p></blockquote><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2022/1/14/20220114015414.png" alt="image-20220113225557690"></p><p>singleton和prototype之间的区别：</p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2022/1/14/20220114015418.png" alt="image-20220113234210550"></p><p><strong>singleton：</strong></p><pre data-enlighter-language="xml">//applicationContext.xml<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd"><beans>    <bean id="userDao" class="com.nothinglin.dao.impl.UserDaoImpl" scope="singleton"></bean></beans></pre><pre data-enlighter-language="java">public class firstSpring {    public static void main(String[] args) {        //加载Spring配置文件        ApplicationContext app = new ClassPathXmlApplicationContext("applicationContext.xml");        //获取Spring容器中对应id下的内容        UserDao userDao1 = (UserDao)app.getBean("userDao");        UserDao userDao2 = (UserDao)app.getBean("userDao");        //调用目标对象的方法//        userDao.save();        System.out.println(userDao1);        System.out.println(userDao2);    }}</pre><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2022/1/14/20220114015423.png" alt="image-20220113234657273"></p><blockquote><p>当scope的取值为singleton值时，</p><p>Bean的实例化个数：1个</p><p>Bean的实例化时机：当Spring核心文件被加载时，实例化配置Bean实例</p><p>Bean的生命周期：</p><p>1.<strong>对象创建</strong>：当应用加载，创建容器时，对象就被创建了</p><p>2.<strong>对象运行</strong>：只要容器在，对象就一直活着</p><p>3.<strong>对象销毁</strong>：当应用写在，销毁容器时，对象就被销毁</p></blockquote><p><strong>prototype：</strong></p><pre data-enlighter-language="xml"><?xml version="1.0" encoding="UTF-8"?><!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd"><beans>    <bean id="userDao" class="com.nothinglin.dao.impl.UserDaoImpl" scope="prototype"></bean></beans></pre><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2022/1/14/20220114015428.png" alt="image-20220113235100507"></p><blockquote><p>Bean的实例化个数：多个</p><p>Bean的实例化时机：当调用getBean（）方法时实例化Bean</p><p>1.<strong>对象创建</strong>：当使用对象时，创建新的对象实例</p><p>2.<strong>对象运行</strong>：只要对象在使用中，就一直活着</p><p>3.<strong>对象销毁</strong>：当对象长时间不用时，被Java的垃圾回收机制回收</p></blockquote><h2 id="Bean生命周期配置"><a href="#Bean生命周期配置" class="headerlink" title="Bean生命周期配置"></a>Bean生命周期配置</h2><p>inti-method 和 destroy-method的意义</p><blockquote><p><strong>init-method</strong>：指定类中的初始化方法的名称</p><p><strong>destroy-method</strong>：指定类中销毁方法的名称</p></blockquote><pre data-enlighter-language="xml">//applicationContext.xml<beans>    <bean id="userDao" class="com.nothinglin.dao.impl.UserDaoImpl" init-method="init" destroy-method="destroy"></bean></beans></pre><pre data-enlighter-language="java">//UserDaoImpl.javapublic class UserDaoImpl implements UserDao {    //无参构造器    public UserDaoImpl(){        System.out.println("UserDaoImpl创建...");    }    //初始化方法    public void init(){        System.out.println("初始化方法...");    }    //销毁方法    public void destroy(){        System.out.println("销毁方法...");    }    //普通方法    public void save(){        System.out.println("save running...");    }}</pre><pre data-enlighter-language="java">public class firstSpring {    public static void main(String[] args) {        //加载Spring配置文件        ClassPathXmlApplicationContext app = new ClassPathXmlApplicationContext("applicationContext.xml");        //获取Spring容器中对应id下的内容        UserDao userDao = (UserDao)app.getBean("userDao");        System.out.println(userDao);        app.close();    }}</pre><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2022/1/14/20220114015434.png" alt="image-20220114002719678"></p><h2 id="Bean实例化的三种方式"><a href="#Bean实例化的三种方式" class="headerlink" title="Bean实例化的三种方式"></a>Bean实例化的三种方式</h2><blockquote><p>1.无参构造方法实例化</p><p>2.工厂静态方法实例化</p><p>3.工厂实例方法实例化</p></blockquote><p>工厂实例化方法还没接触，无参构造方法实例化就是我们上面的那个spring程序一样，那个就是无参构造方法的方式来实例化对象。</p><p><strong>工厂静态方法实例化：</strong></p><pre data-enlighter-language="xml">//applicationContext.xml//静态工厂<beans>    <bean id="userDao" class="com.nothinglin.factory.StaticFactory" factory-method="getUserDao"></bean></beans></pre><pre data-enlighter-language="java">//StaticFactory.java//静态工厂public class StaticFactory {    public static UserDao getUserDao(){        return new UserDaoImpl();    }}</pre><pre data-enlighter-language="java">//userdao接口public interface UserDao {    public void save();}</pre><pre data-enlighter-language="java">//userdao实例化public class UserDaoImpl implements UserDao {    //无参构造器    public UserDaoImpl(){        System.out.println("UserDaoImpl创建...");    }    //普通方法    public void save(){        System.out.println("save running...");    }}</pre><pre data-enlighter-language="java">public class firstSpring {    public static void main(String[] args) {        //加载Spring配置文件        ClassPathXmlApplicationContext app = new ClassPathXmlApplicationContext("applicationContext.xml");        //获取Spring容器中对应id下的内容        //静态工厂实例化        UserDao userDao = (UserDao)app.getBean("userDao");        //调用目标对象的方法        userDao.save();    }}</pre><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2022/1/14/20220114015446.png" alt="image-20220114013545101"></p><p><strong>工厂实例方法实例化：</strong></p><pre data-enlighter-language="xml">//applicationContext.xml//实例工厂实例化bean对象<beans>    <!--  实例工厂实例化bean对象  -->    <bean id="factory" class="com.nothinglin.factory.DynamicFactory"></bean>    <bean id="userDao" factory-bean="factory" factory-method="getUserDao"></bean></beans></pre><pre data-enlighter-language="java">//DynamicFactory.java//实例工厂public class DynamicFactory {    public UserDao getUserDao(){        return new UserDaoImpl();    }}</pre><pre data-enlighter-language="java">//userdao接口public interface UserDao {    public void save();}</pre><pre data-enlighter-language="java">//userdao实例化public class UserDaoImpl implements UserDao {    //无参构造器    public UserDaoImpl(){        System.out.println("UserDaoImpl创建...");    }    //普通方法    public void save(){        System.out.println("save running...");    }}</pre><pre data-enlighter-language="java">public class firstSpring {    public static void main(String[] args) {        //加载Spring配置文件        ClassPathXmlApplicationContext app = new ClassPathXmlApplicationContext("applicationContext.xml");        //获取Spring容器中对应id下的内容        //静态工厂实例化        UserDao userDao = (UserDao)app.getBean("userDao");        //调用目标对象的方法        userDao.save();    }}</pre><blockquote><p>对比了上面的几种方法，我在想：这三种方式存在的意义在哪？我还没搞明白这个。</p></blockquote><h2 id="service层封装实例化bean对象方法"><a href="#service层封装实例化bean对象方法" class="headerlink" title="service层封装实例化bean对象方法"></a>service层封装实例化bean对象方法</h2><p>通过观察上面的代码可以发现有个地方是可以进行优化，那就是配置文件的加载。对于配置文件加载这种繁琐的工作，应该交由service层去完成。</p><pre data-enlighter-language="txt">Spring│  ├─main│  ├─java│  │  └─com│  │      └─nothinglin│  │          ├─dao│  │          │  │  UserDao.java│  │          │  │  │  │          │  └─impl│  │          │          UserDaoImpl.java│  │          │          │  │          ├─factory│  │          │      DynamicFactory.java│  │          │      StaticFactory.java│  │          │      │  │          └─service│  │              │  UserService.java│  │              │  │  │              └─impl│  │                      UserServiceImpl.java│  │                      │  └─resources│          applicationContext.xml│          └─test    └─java            firstSpring.java</pre><pre data-enlighter-language="xml">//applicationContext.xml<beans><bean id="userDao" class="com.nothinglin.dao.impl.UserDaoImpl"></bean></beans></pre><pre data-enlighter-language="java">public interface UserDao {    public void save();}</pre><pre data-enlighter-language="java">public class UserDaoImpl implements UserDao {    //无参构造器    public UserDaoImpl(){        System.out.println("UserDaoImpl创建...");    }    //初始化方法    public void init(){        System.out.println("初始化方法...");    }    //销毁方法    public void destroy(){        System.out.println("销毁方法...");    }    //普通方法    public void save(){        System.out.println("save running...");    }}</pre><pre data-enlighter-language="java">public interface UserService {    public void save();}</pre><pre data-enlighter-language="java">public class UserServiceImpl implements UserService {    public void save() {        ApplicationContext app = new ClassPathXmlApplicationContext("applicationContext.xml");        UserDao userDao = (UserDao) app.getBean("userDao");        userDao.save();    }}</pre><pre data-enlighter-language="java">public class SpringTest {    public static void main(String[] args) {        UserService userService = new UserServiceImpl();        userService.save();    }}</pre><p>通过观察可以发现，这个service层更像是封装起一些繁琐的方法而存在的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本篇文章是我的SSM框架入门笔记，笔记内容基于黑马程序员的课程内容：&lt;a href=&quot;https://www.bilibili.com/video/BV1WZ4y1P7Bp?p=35&amp;spm_id_from=pageDriver&quot;&gt;点击打开&lt;/a&gt;</summary>
      
    
    
    
    <category term="编程" scheme="https://www.nothinglin.ml/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Spring" scheme="https://www.nothinglin.ml/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>实战项目研究 | 基于SSM仿天猫商城系统</title>
    <link href="https://www.nothinglin.ml/2021/12/18/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE%E7%A0%94%E7%A9%B6-%E5%9F%BA%E4%BA%8ESSM%E4%BB%BF%E5%A4%A9%E7%8C%AB%E5%95%86%E5%9F%8E%E7%B3%BB%E7%BB%9F/"/>
    <id>https://www.nothinglin.ml/2021/12/18/%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE%E7%A0%94%E7%A9%B6-%E5%9F%BA%E4%BA%8ESSM%E4%BB%BF%E5%A4%A9%E7%8C%AB%E5%95%86%E5%9F%8E%E7%B3%BB%E7%BB%9F/</id>
    <published>2021-12-17T16:32:41.000Z</published>
    <updated>2022-01-11T15:49:10.143Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本次项目研究基于作者 <strong>我没有三颗心脏</strong> 的仿天猫商城代码及说明博文，原文地址参考如下：</p><p><a href="https://github.com/wmyskxz/Tmall_SSM">Tmall_SSM</a></p><p><a href="https://www.jianshu.com/p/8fc8e0bd45e0">模仿天猫实战【SSM】——总结</a></p></blockquote><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/12/18/20211218020244.png" alt="image-20211218003850196"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>对于实战项目研究相关的博客，其实我不是很想分（一）、（二）、···、（六）那么多篇的文章来写，一次性写在一篇博客内也方便学习和查找。所以这篇博客将会从头到尾记录我对此项目的研究及获得的收获感悟。</p><p><strong>怎样发现这个项目的？</strong></p><p>其实很早的时候就发现了的，不过那时（大一、大二左右的样子吧）觉得自己的知识储备还不够，感觉无法下手这样的项目。有尝试过下载进行运行，但是都失败了，所以就没再弄过了。</p><p>不过最近确实有点焦虑，Java没学精通，框架在上课的时候也没好好听，JavaWeb简单的项目开发已经可以掌握了，不过还是要参考大量代码的那种，而SSM框架结构到现在都还没了解。而且现在感觉学校的一些成绩好的，在做课设的时候都直接用SSM框架搭建项目，对比自己的项目之后，让我感觉到了世界的参差。</p><p>前面的文章 <strong><a href="https://www.nothinglin.ml/2021/12/05/%E7%8B%AC%E7%AB%8B%E6%80%9D%E8%80%83/%E6%80%9D%E8%80%83-%E9%80%A0%E8%BD%AE%E5%AD%90%E8%BF%98%E6%98%AF%E7%94%A8%E8%BD%AE%E5%AD%90%EF%BC%9F/">思考|造轮子还是用轮子？</a></strong> 也提及过，最高效的学习方法就是 <strong>问题驱动型</strong>的学习方式，也就是我学这个知识能给我解决什么样的问题。所以我觉得，如果我要入门SSM的话，那么我就应该从实战项目入手，对项目结构和涉及到的编程内容，包的使用进行拆解学习，而不是像在学校那样，把所有知识都系统地过一遍之后再来实战。如果是这样的话，那么我的学习热情将会降低一半以上。我不知道我下一章学到的内容在整个项目系统结构中有什么用！或许根本就不会被用到，这种情况下就会陷入自我怀疑当中，很容易影响学习的热情。</p><p>如果一开始就有了一个明确的实战项目，项目中所用到的知识点都是实实在在可以感受到的，这样的话就能加深我们的知识理解能力，达到事半功倍的效果。</p><p>所以我就在Github上面直接搜索 <strong>SSM项目</strong> ，第一个出现的就是这个基于SSM仿天猫商城的项目。其实试过很多其他的项目，要么就是没给数据库文件，要么就是导入运行报错很多，代码凌乱。最后也就只有这个项目是我目前能够运行开来执行其中的全部功能的项目。</p><p>如果要研究一个项目，把它成功运行起来就等于研究了一半。运行不起来的或者没有数据库文件的基本被我称为垃圾项目。</p><h2 id="下载此项目"><a href="#下载此项目" class="headerlink" title="下载此项目"></a>下载此项目</h2><blockquote><p>这个是项目的github地址：<a href="https://github.com/wmyskxz/Tmall_SSM">Tmall_SSM</a></p></blockquote><p>把项目下载到本地中使用IDEA开发工具将其导入进去。</p><h2 id="检查代码是否报错"><a href="#检查代码是否报错" class="headerlink" title="检查代码是否报错"></a>检查代码是否报错</h2><p><strong>报错：</strong></p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/12/18/20211218020252.png" alt="image-20211218015540365"></p><p><strong>分析：</strong></p><p>按照我的理解就是，大概是IDEA无法识别到Java工具包，难道是Java的环境配置问题？更换Java的工作环境试一试。</p><p><strong>解决：</strong></p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/12/18/20211218020258.png" alt="image-20211218015831839"></p><p>原来是用错了Java开发版本导致的报错，只需要把对应的版本换回你电脑中的版本就没啥问题了，其他报错的话再根据IDEA给出的解决方案进行处理。一般都是代码语法错误或者是包的路径没导入正确，都是这些问题。</p><h2 id="将数据库文件中的数据导入到mysql中"><a href="#将数据库文件中的数据导入到mysql中" class="headerlink" title="将数据库文件中的数据导入到mysql中"></a>将数据库文件中的数据导入到mysql中</h2><p>数据库导入的过程中就有点坑了，我大二的时候之所以放弃就是因为数据库没有成功导入，导入的过程中报了一堆错误。当时也看不懂，然后就放弃了。</p><p>它就报错说不能创建表，但是也不知道哪里有问题，就觉得可能是作者给的数据库错误导致的。</p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/12/18/20211218020303.png" alt="image-20211218011028132"></p><p>后面我也不知道是怎么发现的，可能是能力提升了一点了吧，突然就觉得奇怪，创建下面的这些表的过程中涉及到了一些外键，我们都知道mysql在执行db文件的时候都是从上到下执行的，可是这里定义的外键是在下面的表中的，也就是此时定义外键而这个外键还不存在，所以说这个表能正常创建吗？不可能的。</p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/12/18/20211218020309.png" alt="image-20211218010541652"></p><p>所以说涉及到数据库文件中含有外键定义的数据，一般都不成功，都需要自己手动按照顺序进行sql语句的执行。比如<code>order_item</code>这个表需要用到order表、product表、user表中的外键，所以就先找到这些表创建的sql语句执行运行。运行完，确定这些表都创建之后最后再运行<code>order_item</code>的sql语句进行这个表的创建，这样就能成功创建了。因为它要涉及到的外键表都已经存在了，所以可以正常创建了。</p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/12/18/20211218020313.png" alt="image-20211218011916736"></p><p>把数据库中的数据搞定之后，当然就是要找到这个项目中的数据库配置文件，调通本地项目和数据库的连接，方便对数据库中的数据进行操作。</p><h2 id="配置数据库连接信息"><a href="#配置数据库连接信息" class="headerlink" title="配置数据库连接信息"></a>配置数据库连接信息</h2><pre data-enlighter-language="txt">TMall_SSM└── src └── main     └── resource         ├── jdbc.properties         └── generatorConfig.xml</pre><p>根据我的折腾，我对于数据库的连接信息修改了这两个文件中的内容之后就可以了。</p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/12/18/20211218020318.png" alt="image-20211218013130460"></p><p><strong>注意：</strong></p><p>对于<strong>jdbc.driver</strong>项中的值，一定要看好自己数据库中的版本。</p><p><strong>Mysql5+：</strong></p><pre data-enlighter-language="sql">jdbc.driver=com.mysql.jdbc.Driver</pre><p><strong>Mysql8+:</strong></p><pre data-enlighter-language="sql">jdbc.driver=com.mysql.cj.jdbc.Driver</pre><p>还有jdbc.url值中的后缀，我的电脑没有这些后缀的话数据库会报错，我现在还没弄明白为什么。</p><pre data-enlighter-language="sql"># 数据库连接（nothinglin_note是数据库的名称）dbUrl=jdbc:mysql://localhost:3306/nothinglin_note?useUnicode=true&characterEncoding=utf8&serverTimezone=GMT&useSSL=false</pre><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/12/18/20211218020323.png" alt="image-20211218013204325"></p><p>对应修改这两个地方的配置信息。</p><p>上面操作完成之后按道理来说，就应该连通数据库了。如果你的数据库还没有连通的话，那么就意味着你的数据库驱动版本和数据库版本不匹配。</p><h2 id="解决数据库驱动版本和数据库版本的不匹配"><a href="#解决数据库驱动版本和数据库版本的不匹配" class="headerlink" title="解决数据库驱动版本和数据库版本的不匹配"></a>解决数据库驱动版本和数据库版本的不匹配</h2><p>我的Mysql数据库版本是6.0.1版本，网上说对应的数据库驱动版本需要在5.1.8 - 5.2.1 这些版本中。一开始我是没留意这个的，我一开始的数据库驱动版本是5.1.2版本。但是后来一直报jdbc的错误，复制报错信息到百度查了才发现可能是数据库驱动版本和数据库版本不匹配。最后尝试将数据库驱动版本也就是jdbc换成5.1.9版本之后，基本数据库连接问题就基本解决了。</p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/12/18/20211218020328.png" alt="image-20211218014159300"></p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/12/18/20211218020331.png" alt="image-20211218014228702"></p><p>数据库配置好了之后，接下来就是紧张的时刻了，就是如何把项目运行起来。这个很明显就是一个JavaWeb项目，需要用服务器把项目给跑起来。所以我选择用我熟悉的tomcat来把项目跑起来。</p><h2 id="配置tomcat"><a href="#配置tomcat" class="headerlink" title="配置tomcat"></a>配置tomcat</h2><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/12/18/20211218020336.png" alt="image-20211218014528064"></p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/12/18/20211218020340.png" alt="image-20211218014658151"></p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/12/18/20211218020344.png" alt="image-20211218014756267"></p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/12/18/20211218020351.png" alt="image-20211218014840522"></p><p>做到这里，其实关于Tomcat的配置都是差不多了的，差不多就可以进行运行了。可是，在我的电脑上，对于这些要用到maven管理一些工具包，在本地环境中是可以识别到的，但是启动tomcat之后就报错，说某某包不存在，这种情况怎么解决？</p><h2 id="tomcat运行时报错maven包不存在？"><a href="#tomcat运行时报错maven包不存在？" class="headerlink" title="tomcat运行时报错maven包不存在？"></a>tomcat运行时报错maven包不存在？</h2><p><strong>报错：</strong></p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/12/18/20211218020356.png" alt="image-20211218015306452"></p><p><strong>解决：</strong></p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/12/18/20211218020400.png" alt="image-20211218015139145"></p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/12/18/20211218020408.png" alt="image-20211218015219082"></p><p>根据图片的提示来操作就可以把这个问题给解决掉。</p><h2 id="成功运行项目"><a href="#成功运行项目" class="headerlink" title="成功运行项目"></a>成功运行项目</h2><p>直接 <a href="http://localhost:8080/">http://localhost:8080/</a> 进入就会跳转到<a href="http://localhost:8080/home">http://localhost:8080/home</a> 这个页面中去</p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/12/18/20211218020413.png" alt="image-20211218003850196"></p><h2 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h2><blockquote><p>一个好的系统需要有一个好的数据库设计，那么什么样的数据库设计能够更灵活地管理系统数据呢？我们在这个仿天猫系统的数据库设计中能得到什么启发？同时这个数据库有没有什么地方需要改进的？</p><p>我需要学习这个系统的数据库设计，同时我也要查阅更多资料看数据库应该怎么设计，不过这个内容应该会出一篇新的博客来记录，这里关于数据库的设计主要以仿天猫系统为主以及简要谈谈自己的感悟。</p></blockquote><p><strong>仿天猫系统的数据库设计：</strong></p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/12/20/20211220163209.png" alt="image-20211220003017211"></p><p>数据库设计的外键设计挺关键的，外键决定你各个表中的数据是否可以关联。</p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/12/20/20211220180735.png" alt="image-20211220180723207"></p><p>从上面可以看出，数据库设计过程中外键的设计挺重要的，后面我会写一篇关于 <strong>数据库设计外键之美</strong> 的博客，讨论一下外键在整个数据库设计过程中的作用。</p><h2 id="SSM项目结构"><a href="#SSM项目结构" class="headerlink" title="SSM项目结构"></a>SSM项目结构</h2><p>我现在对SSM基本是零基础，我如果需要学习这个SSM项目实战的话，首先我需要知道SSM的基本结构是怎样的，还有和传统的servlet又有那些区别，有什么优势？为什么被称为轻量级应用框架。</p><blockquote><p>我不会在这里太过于详细介绍关于ssm入门的内容，这里关于SSM项目结构是基于本次研究的项目进行的，不过在进行之前我需要恶补一下关于SSM的基本内容，我会单独写一篇博客来记录，这里的SSM项目刨析主要是围绕仿天猫项目展开，这样的话整篇博客就不会太冗余。</p><p><strong>PS：</strong>这其实就是一种主动学习的方法，我现在需要学习SSM基本内容来帮助我理解这个项目的源代码，有目的性的学习都是一种主动高效的学习，我觉得都会变得非常高效。</p><p>研究前先学内容：<strong>SSM项目框架入门</strong></p></blockquote><p>下面的文件结构就是本次研究的仿天猫商城的核心代码文件。</p><pre data-enlighter-language="txt">src│  ├─main│  ├─java│  │  └─cn│  │      └─wmyskxz│  │          ├─controller│  │          │      CategoryController.java│  │          │      ForeController.java│  │          │      OrderController.java│  │          │      PageController.java│  │          │      ProductController.java│  │          │      ProductImageController.java│  │          │      PropertyController.java│  │          │      PropertyValueController.java│  │          │      ReferalLinkController.java│  │          │      UserController.java│  │          │      │  │          ├─interceptor│  │          │      LoginInterceptor.java│  │          │      OtherInterceptor.java│  │          │      │  │          ├─mapper│  │          │      CategoryMapper.java│  │          │      OrderItemMapper.java│  │          │      OrderMapper.java│  │          │      ProductImageMapper.java│  │          │      ProductMapper.java│  │          │      PropertyMapper.java│  │          │      PropertyValueMapper.java│  │          │      ReferalLinkMapper.java│  │          │      ReviewMapper.java│  │          │      UserMapper.java│  │          │      │  │          ├─pojo│  │          │      Category.java│  │          │      CategoryExample.java│  │          │      Order.java│  │          │      OrderExample.java│  │          │      OrderItem.java│  │          │      OrderItemExample.java│  │          │      Product.java│  │          │      ProductExample.java│  │          │      ProductImage.java│  │          │      ProductImageExample.java│  │          │      Property.java│  │          │      PropertyExample.java│  │          │      PropertyValue.java│  │          │      PropertyValueExample.java│  │          │      ReferalLink.java│  │          │      ReferalLinkExample.java│  │          │      Review.java│  │          │      ReviewExample.java│  │          │      User.java│  │          │      UserExample.java│  │          │      │  │          └─service│  │                  CategoryService.java│  │                  CategoryServiceImpl.java│  │                  OrderItemService.java│  │                  OrderItemServiceImpl.java│  │                  OrderService.java│  │                  OrderServiceImpl.java│  │                  ProductImageService.java│  │                  ProductImageServiceImpl.java│  │                  ProductService.java│  │                  ProductServiceImpl.java│  │                  PropertyService.java│  │                  PropertyServiceImpl.java│  │                  PropertyValueService.java│  │                  PropertyValueServiceImpl.java│  │                  ReferalLinkService.java│  │                  ReferalLinkServiceImpl.java│  │                  ReviewService.java│  │                  ReviewServiceImpl.java│  │                  UserService.java│  │                  UserServiceImpl.java│  │                  │  ├─resources│  │  │  generatorConfig.xml│  │  │  jdbc.properties│  │  │  logback.xml│  │  │  spring-mvc.xml│  │  │  spring-mybatis.xml│  │  │  │  │  └─mapper│  │          CategoryMapper.xml│  │          OrderItemMapper.xml│  │          OrderMapper.xml│  │          ProductImageMapper.xml│  │          ProductMapper.xml│  │          PropertyMapper.xml│  │          PropertyValueMapper.xml│  │          ReferalLinkMapper.xml│  │          ReviewMapper.xml│  │          UserMapper.xml│  │          │  └─webapp│      │  index.jsp│      │  │      ├─assets│      │  ├─css│      │  │      bootstrap.css│      │  │      custom-styles.css│      │  │      font-awesome.css│      │  │      │      │  ├─font-awesome│      │  │  └─fonts│      │  │          fontawesome-webfontba72.eot│      │  │          fontawesome-webfontba72.svg│      │  │          fontawesome-webfontba72.ttf│      │  │          fontawesome-webfontba72.woff│      │  │          fontawesome-webfontd41d.eot│      │  │          │      │  ├─fonts│      │  │      glyphicons-halflings-regular.eot│      │  │      glyphicons-halflings-regular.svg│      │  │      glyphicons-halflings-regular.ttf│      │  │      glyphicons-halflings-regular.woff│      │  │      glyphicons-halflings-regulard41d.eot│      │  │      │      │  └─js│      │      │  bootstrap.min.js│      │      │  custom-scripts.js│      │      │  custom.js│      │      │  jquery-1.10.2.js│      │      │  jquery.metisMenu.js│      │      │  │      │      ├─dataTables│      │      │      dataTables.bootstrap.css│      │      │      dataTables.bootstrap.js│      │      │      jquery.dataTables.js│      │      │      │      │      └─morris│      │              morris-0.4.3.min.css│      │              morris.js│      │              raphael-2.1.0.min.js│      │              │      ├─css│      │  ├─bootstrap│      │  │  ├─3.3.6│      │  │  │      bootstrap-theme.css│      │  │  │      bootstrap-theme.css.map│      │  │  │      bootstrap-theme.min.css│      │  │  │      bootstrap-theme.min.css.map│      │  │  │      bootstrap.css│      │  │  │      bootstrap.css.map│      │  │  │      bootstrap.min.css│      │  │  │      bootstrap.min.css.map│      │  │  │      │      │  │  └─fonts│      │  │          glyphicons-halflings-regular.eot│      │  │          glyphicons-halflings-regular.svg│      │  │          glyphicons-halflings-regular.ttf│      │  │          glyphicons-halflings-regular.woff│      │  │          glyphicons-halflings-regular.woff2│      │  │          │      │  └─fore│      │          footer.css│      │          head.css│      │          imgAndInfo.css│      │          navigator.css│      │          style.css│      │          │      ├─img│      │  ├─fore│      │  │      7day.png│      │  │      alipay2wei.jpg│      │  │      buyflow.png│      │  │      carousel1.jpg│      │  │      carousel2.jpg│      │  │      carousel3.jpg│      │  │      carousel4.jpg│      │  │      cartNotSelected.png│      │  │      cartSelected.png│      │  │      comformPayFlow.png│      │  │      confirmOrderTmall.png│      │  │      copyRight1.jpg│      │  │      copyRight2.jpg│      │  │      creditcard.png│      │  │      decrease.png│      │  │      end.png│      │  │      footer1.png│      │  │      footer2.png│      │  │      footer3.png│      │  │      footer4.png│      │  │      hd.jpg│      │  │      ico-circle.png│      │  │      increase.png│      │  │      leaveMessage.png│      │  │      li_dot.png│      │  │      loginPage-background.jpg│      │  │      no-product.png│      │  │      orderFinish.png│      │  │      orderItemTmall.png│      │  │      paySuccess.png│      │  │      police-icon.png│      │  │      priceBackground.png│      │  │      promise.png│      │  │      qr-code.png│      │  │      reviewLight.png│      │  │      simpleLogo.png│      │  │      tmall-cat.png│      │  │      tmall-coupon.png│      │  │      tmall-international.png│      │  │      tmall-logo.png│      │  │      tmall-shop.png│      │  │      tmallbuy.png│      │  │      tmallLogo.png│      │  │      wangwang.gif│      │  │      warning.png│      │  │      ww-online.png│      │  │      │      │  └─product│      │      │  error.png│      │      │  │      │      └─1│      │              1.jpg│      │              │      ├─js│      │  ├─bootstrap│      │  │  └─3.3.6│      │  │          bootstrap.js│      │  │          bootstrap.min.js│      │  │          npm.js│      │  │          │      │  └─jquery│      │      └─2.0.0│      │              jquery.min.js│      │              │      └─WEB-INF│          │  web.xml│          │  │          └─views│              │  alipay.jsp│              │  bought.jsp│              │  buyPage.jsp│              │  cart.jsp│              │  confirmPay.jsp│              │  index.jsp│              │  loginPage.jsp│              │  orderConfirmedPage.jsp│              │  payed.jsp│              │  product.jsp│              │  productDetail.jsp│              │  registerPage.jsp│              │  registerSuccessPage.jsp│              │  reviewPage.jsp│              │  searchResult.jsp│              │  test.jsp│              │  │              ├─admin│              │      editCategory.jsp│              │      editProduct.jsp│              │      editProductImage.jsp│              │      editProperty.jsp│              │      editPropertyValue.jsp│              │      editUser.jsp│              │      index.jsp│              │      listCategory.jsp│              │      listLink.jsp│              │      listOrder.jsp│              │      listProduct.jsp│              │      listProperty.jsp│              │      listPropertyValue.jsp│              │      listUser.jsp│              │      │              └─include│                      footer.jsp│                      header.jsp│                      hot-word-con.jsp│                      mini-search.jsp│                      modal.jsp│                      search.jsp│                      top.jsp│                      └─test    └─java            FileTester.java            TestMybatisGenerator.java</pre><h2 id="一：如何设置首页访问？"><a href="#一：如何设置首页访问？" class="headerlink" title="一：如何设置首页访问？"></a>一：如何设置首页访问？</h2><p>使用tomcat启动项目时，我们需要tomcat跳转到我们第一个编辑页面中，这要怎么实现？仿Tmall项目中是怎样实现的？ssm项目结构需要怎么配置这个问题？</p><p>首先我要找到现目中的首页jsp文件，一般来说都是<strong>index.jsp</strong>。</p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2022/1/11/20220111041336.png" alt="image-20220111033301438"></p><p>这里有点引人深思，按照内容代码理解的话就是这个<strong>index.jsp</strong>文件内容重定向到**/home<strong>这个地址上，这样的话需要去控制层（controller文件夹下）去找找看哪里有设置这个</strong>/home**。</p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2022/1/11/20220111041341.png" alt="image-20220111033755010"></p><p>到这里我有一些疑惑就是，首页访问的是WEB-INF目录下的<strong>index.jsp</strong>文件还是view目录下的<strong>index.jsp</strong>文件？</p><p>view目录下的<strong>index.jsp</strong>文件代码内容就是我们的首页内容，但是tomcat不应该是默认打开WEB-INF目录下的<strong>index.jsp</strong>文件作为首页的吗？首页内容怎么会变成view目录下的<strong>index.jsp</strong>文件代码内容？</p><p>我在想，这个是使用ssm框架的，那么有一些配置会不会在xml配置文件中设置？再找找看····</p><p>我好像记得ssm框架有个什么视图层，好像是springMVC，会不会在这个xm文件中配置了？</p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2022/1/11/20220111041350.png" alt="image-20220111035816526"></p><p>是不是这里的设置我还不清楚，需要实践证明一下。</p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2022/1/11/20220111041355.png" alt="image-20220111040208099"></p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2022/1/11/20220111041359.png" alt="image-20220111040224257"></p><p>tomcat运行完成之后竟然第一个跳转到的页面时WEB-INF目录下的<strong>index.jsp</strong>中的内容，也就是说这里重定向到/home目录。</p><p>那么就是说，springMVC中指定了view目录作为视图层，然后：</p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2022/1/11/20220111041403.png" alt="image-20220111040704295"></p><p>也就是/home路径下返回index，这个index其实应该指的是view目录下的index.jsp，我猜应该是这样。再看看其他的是不是这样，找个登录界面看看，对应的return返回值是不是view目录下的jsp文件名。</p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2022/1/11/20220111041407.png" alt="image-20220111041011435"></p><p>果然是这样子！</p><blockquote><p>SpringMVC指定对应的jsp文件资源目录，然后在controller控制层中定义相应的访问路径，这个路径的返回值就是对应视图层中的jsp文件名。</p></blockquote><p>通过观察首页的功能，好像感觉挺单调的，有很多</p><p>都是装饰用的。我大概数了一下好像，好像首页中的核心功能只有：<strong>登录、注册、我的订单、购物车、搜索、商品展示</strong>，其他的都是修饰用的。</p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2022/1/11/20220111234858.png" alt="image-20220111200347171"></p><h2 id="二：如何展示商品列表？"><a href="#二：如何展示商品列表？" class="headerlink" title="二：如何展示商品列表？"></a>二：如何展示商品列表？</h2><p>这个首页是在view目录下的index.jsp文件中的，找到对应的核心代码：</p><pre data-enlighter-language="jsp"><%@ page language="java" contentType="text/html; charset=UTF-8"         pageEncoding="UTF-8" isELIgnored="false" %><%@include file="include/header.jsp" %><%@include file="include/top.jsp" %><%@include file="include/search.jsp" %>//商品显示功能<div style="clear: both;"></div><div class="new-floor-con">    <div class="workArea">        <c:forEach items="${categories}" var="c" varStatus="sts">            <%-- 该分类下有产品才能显示 --%>            <c:if test="${!empty c.products}">                <%-- 默认只展示前五个分类的内容，多了页面太长 --%>                <c:if test="${sts.count<=5}">                    <div class="floor-line-con">                        <i class="color-mark"></i>                        <div class="floor-name">${c.name}</div>                        <br>                        <c:forEach items="${c.products}" var="p" varStatus="st">                            <c:if test="${st.count<=5}">                                <a class="grid" href="showProduct?product_id=${p.id}">                                    <div class="productItem">                                        <img class="floor-item-img" src="img/product/${p.id}/1.jpg">                                        <div class="floor-item-title">${p.name}</div>                                        <div class="floor-price">${p.price}</div>                                    </div>                                </a>                            </c:if>                        </c:forEach>                    </div>                    <div style="clear: both;"></div>                </c:if>            </c:if>        </c:forEach>        <div class="tm-end">            <img src="img/fore/end.png"/>        </div>    </div></div><div style="clear: both;"></div><%@include file="include/footer.jsp" %></pre><p>关键的商品展示部分看下面：</p><pre data-enlighter-language="jsp">        <c:forEach items="${categories}" var="c" varStatus="sts">            <%-- 该分类下有产品才能显示 --%>            <c:if test="${!empty c.products}">                <%-- 默认只展示前五个分类的内容，多了页面太长 --%>                <c:if test="${sts.count<=5}">                    <div class="floor-line-con">                        <i class="color-mark"></i>                        <div class="floor-name">${c.name}</div>                        <br>                        <c:forEach items="${c.products}" var="p" varStatus="st">                            <c:if test="${st.count<=5}">                                <a class="grid" href="showProduct?product_id=${p.id}">                                    <div class="productItem">                                        <img class="floor-item-img" src="img/product/${p.id}/1.jpg">                                        <div class="floor-item-title">${p.name}</div>                                        <div class="floor-price">${p.price}</div>                                    </div>                                </a>                            </c:if>                        </c:forEach>                    </div>                    <div style="clear: both;"></div>                </c:if>            </c:if>        </c:forEach></pre><p>因为我有一点JavaWeb的基础，我知道这里${categories}是在控制层controller上通过httprequest和httprespond的方式传递一个数组值到前端页面上，${categories}就是一个按照分类排序的一个商品信息数组。</p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2022/1/11/20220111233513.png" alt="image-20220111230818682"></p><p>SSM的语法我还不是很清楚，但我知道这里是根据分类信息查找数据库，然后将查到的数据库内容封装到categories数组变量中，再传递回前端页面中去。</p><p><strong>c:forEach</strong>语法我的话并不是很熟悉，我知道这是一个遍历循环的标签，item就是我们要循环的数组，var相当于是每一项的一个统称，比如：1.id、2.id、3.id、···、var.id。</p><p>varstatus是什么？我在想varstatus和var有什么不同？</p><p>下面是我在网上找到的资料（<a href="https://www.iteye.com/blog/ocaicai-787053">原文</a>）：</p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2022/1/11/20220111233538.png" alt="image-20220111231945422"></p><p>虽然我还是半懂不懂，不过上面的代码使用的就是varStatus.count来计算数组有多少条商品信息，商品列表展示只展示前5条。</p><p>其实看到这里我大概就理解了本项目是如何实现商品列表的展示的，可能ssm的一些语法我还没掌握，但是我知道这个实现方法和Javaweb是一样的。后面对于ssm语法学习还会进行系统过一遍，到时根据这些方法来实战一遍。</p><blockquote><p>本次学习了解了c：foreach的varstatus属性，上面写的其实只是了解了后端数据如何传输到前端页面中而已。还有就是，后端是怎样查询数据库的呀？怎么封装商品信息的呀？等等这些问题需要等我把ssm基础过一遍之后才会深入这里代码的研究。</p></blockquote><blockquote><p>事时上到这里，大概也就明白了什么是控制层controller，也就是后端用来跟前端交流的一个层面，暂时知道这些就够了。</p></blockquote><p><strong>持续更新中····</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本次项目研究基于作者 &lt;strong&gt;我没有三颗心脏&lt;/strong&gt; 的仿天猫商城代码及说明博文，原文地址参考如下：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/wmyskxz/Tmall_SSM&quot;&gt;Tmall_SSM&lt;</summary>
      
    
    
    
    <category term="项目实战研究分析" scheme="https://www.nothinglin.ml/categories/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/"/>
    
    
    <category term="SSM项目" scheme="https://www.nothinglin.ml/tags/SSM%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>Mysql问题 | Mysql使用过程中常遇见的问题</title>
    <link href="https://www.nothinglin.ml/2021/12/17/%E9%97%AE%E9%A2%98%E6%94%B6%E9%9B%86/Mysql%E9%97%AE%E9%A2%98-Mysql%E4%BD%BF%E7%94%A8%E8%BF%87%E7%A8%8B%E4%B8%AD%E5%B8%B8%E9%81%87%E8%A7%81%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://www.nothinglin.ml/2021/12/17/%E9%97%AE%E9%A2%98%E6%94%B6%E9%9B%86/Mysql%E9%97%AE%E9%A2%98-Mysql%E4%BD%BF%E7%94%A8%E8%BF%87%E7%A8%8B%E4%B8%AD%E5%B8%B8%E9%81%87%E8%A7%81%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2021-12-17T07:18:57.000Z</published>
    <updated>2021-12-17T07:42:16.040Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在编程的过程中，我们经常会遇到代码错误之外的报错，那就是环境变量的报错。对于Mysql来说的话那就是对应的数据库版本的匹配问题。</p></blockquote><h2 id="数据库版本与数据库驱动版本的冲突"><a href="#数据库版本与数据库驱动版本的冲突" class="headerlink" title="数据库版本与数据库驱动版本的冲突"></a>数据库版本与数据库驱动版本的冲突</h2><p><strong>先来看看报错情况：</strong></p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/12/17/20211217154155.png" alt="image-20211217152834130"></p><p>遇到报错的话第一时间就是先去百度搜索看看是哪里错误的，查询之后的搜索结果都把矛头指向了数据库驱动版本上。</p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/12/17/20211217154200.png" alt="image-20211217153058826"></p><p>根据这个解决方案，最后我也把我的问题给解决了。</p><p><strong>参考资料：</strong></p><ul><li><a href="https://www.codeleading.com/article/51273377891/">解决Could not retrieve transaction read-only status from server</a></li></ul><h2 id="Mysql8-与mysql5-驱动名的差异"><a href="#Mysql8-与mysql5-驱动名的差异" class="headerlink" title="Mysql8+与mysql5+驱动名的差异"></a>Mysql8+与mysql5+驱动名的差异</h2><p>对于JavaWeb还有一个让我们摸不着头脑的问题就是数据库的驱动名，数据库5+的驱动名和数据库8+的驱动名是有区别的。比如：</p><p><strong>Mysql5+：</strong></p><pre data-enlighter-language="mysql">jdbc.driver=com.mysql.jdbc.Driver</pre><p><strong>Mysql8+:</strong></p><pre data-enlighter-language="">jdbc.driver=com.mysql.cj.jdbc.Driver</pre><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/12/17/20211217154206.png" alt="image-20211217153605041"></p><p>注意它们的区别，进行项目环境配置的时候一定要注意这些。</p><h2 id="数据库地址连接问题"><a href="#数据库地址连接问题" class="headerlink" title="数据库地址连接问题"></a>数据库地址连接问题</h2><p>有时候就真的莫名其妙，我也不知道怎么回事，比如下面的地址配置：</p><pre data-enlighter-language="mysql"># 数据库连接（nothinglin_note是数据库的名称）dbUrl=jdbc:mysql://localhost:3306/nothinglin_note</pre><p>有时候可以，有时候出问题，必须要加一些后缀才能保证少出问题，我现在还没搞明白，但是我下面这些后缀能够保证我目前的<strong>Mysql数据库6.0.11版本</strong>与<strong>jdbc驱动5.1.9版本</strong>能够不出问题。</p><pre data-enlighter-language="mysql"># 数据库连接（nothinglin_note是数据库的名称）dbUrl=jdbc:mysql://localhost:3306/nothinglin_note?useUnicode=true&characterEncoding=utf8&serverTimezone=GMT&useSSL=false</pre><p>既然还不清楚就先记着先吧，后面能力上去之后再去分析原因。</p><p><strong>更新中····</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;在编程的过程中，我们经常会遇到代码错误之外的报错，那就是环境变量的报错。对于Mysql来说的话那就是对应的数据库版本的匹配问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;数据库版本与数据库驱动版本的冲突&quot;&gt;&lt;a href=&quot;#数据库版本</summary>
      
    
    
    
    <category term="问题收集" scheme="https://www.nothinglin.ml/categories/%E9%97%AE%E9%A2%98%E6%94%B6%E9%9B%86/"/>
    
    
    <category term="Mysql" scheme="https://www.nothinglin.ml/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Arduino | 稀里糊涂选课-因课设苦逼入门</title>
    <link href="https://www.nothinglin.ml/2021/12/15/%E7%A1%AC%E4%BB%B6/Arduino-%E7%A8%80%E9%87%8C%E7%B3%8A%E6%B6%82%E9%80%89%E8%AF%BE-%E5%9B%A0%E8%AF%BE%E8%AE%BE%E8%8B%A6%E9%80%BC%E5%85%A5%E9%97%A8/"/>
    <id>https://www.nothinglin.ml/2021/12/15/%E7%A1%AC%E4%BB%B6/Arduino-%E7%A8%80%E9%87%8C%E7%B3%8A%E6%B6%82%E9%80%89%E8%AF%BE-%E5%9B%A0%E8%AF%BE%E8%AE%BE%E8%8B%A6%E9%80%BC%E5%85%A5%E9%97%A8/</id>
    <published>2021-12-15T05:31:09.000Z</published>
    <updated>2021-12-16T08:09:34.334Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/12/16/20211216000242.jpg" alt="IMG_20211215_002106"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>先讲一下背景吧，arduino真的是误打误撞入门的。我在学校的专业是软件工程，除非自己感兴趣，否则是很少会接触硬件相关的东西的。大二下学期选课，本来已经选了好多水课了的，但是还是差2分才把这学期的选分选满，为了大四不用再上选修课，所以选修分能提前修就提前修，不然后面压力就会挺大的。</p><p>此时正一筹莫展时，辅导员在群里发布了一些推荐课程，其中就有这门arduino创意实践，我看是考查课不用考试，而且说到时跟着老师做一些硬件成品，比如什么自动浇花之类的好玩创意实践。本来我对这些就有点感兴趣，再加上主观判断应该是门水课，压力不会太大，可以省出时间搞其他事情，于是就上了辅导员的贼船。刚好选完这门课之后这学期的选修分修满了。</p><p>其实我对这门课想吐槽又想点赞，就怀着这种矛盾的心情。为什么想吐槽，上课几个星期下来，慢慢觉得这门课挺枯燥的，最后才发现，班里就我这么一个软件系的，其他的都是计算机系。难怪看他们插电路插得那么老练，我还在那里懵逼地看着教程，而且不懂原理地照着教程一孔一孔地插。</p><p>好在老师对实验报告要求不多，但是他挺认真改的。其实我挺怕哪些认真地老师，老师一认真，你的平时分就少了。这就意味着要费更多时间去应付分数，祈祷能过。</p><p>一直以来的实验报告我都是做得出来的我就拍照，做不出来就拍别人的照。反正都是能混就混。反正实验报告也就只是要看运行结果图。</p><p>平时上课也就是根据元器件的顺序来进行得，比如第一周认识arduino开发板，搞一个helloworld输出。第二周就是led灯点亮实验，第三周控制开关按键的使用，第四周蜂鸣器、第五周数码管显示器等等····</p><blockquote><p>学到第十四周，好了给你一个课设题目，自己去完成，准时交！</p></blockquote><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/12/16/20211216000250.png" alt="image-20211215172035662"></p><p>我的老天，这个时候我既不懂C语言，也不懂电路设计一点基础，要怎么搞啊？</p><p>原本我想着的是，我们学完老师会一周一个步骤，带我们做一个什么浇花系统啊，或啥的。然后成品就当课设之类的，万万没想到啊，带我们学会用元器件之后就给我们题目自己搞。要怎么搞哦？</p><p><strong>arduino课设题目</strong></p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/12/16/20211216000254.png" alt="image-20211215172603648"></p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/12/16/20211216000300.png" alt="image-20211215172640079"></p><p>对于零基础arduino的朋友们来说，谈谈你们的感受。我一开始看题目我是真的懵逼啊，这怎么搞？对了我第一反应就是上github上找。糟糕！一点有用的或者说搭边的都没有，我分析了这题目，找了一个我认为较为简单的选题来做。那就是第一个<strong>声敏反应测试仪</strong>，其他的看得我真的一脸懵逼。</p><p>不知道是不是这么名字太高大上了，还是怎的。我上百度搜了声敏反应测试仪+arduino关键字，就没几个有用的，所以说那几周我都很郁闷，一筹莫展。主要是这门课只有我自己，其他我都不熟，想抱大腿也找不到。这时我真的绝望了，我一直劝舍友不要再选单片机了。</p><p>这时对这门课的厌恶心情也起来了，一直骂这门课疯狂吐槽。再加上这门课是辅导员推荐的，私底下也疯狂吐槽。就这样，郁闷了一两周，十七周就要交作业了，我已经做好抱大腿的准备了，准备尝试厚着脸皮去搭讪几个大牛。可惜没成，终归怪我脸皮薄，要怎么搭讪？</p><ul><li>嘿！兄弟，课程设计一起组队咯！</li><li><strong>这门课设不用组队的！</strong></li><li>呜呜，兄弟，能不能带带我？</li><li><strong>呵呵</strong></li></ul><p>当然上面都是我造的梗，但想到这些我真的厚不了脸皮。难道跟老师摊牌，说自己是软件系的，对电路没有基础，这个课设真的完成不了？</p><p>算了吧，我就这么点出息？</p><h2 id="灵感出现"><a href="#灵感出现" class="headerlink" title="灵感出现"></a>灵感出现</h2><p>如果按照常规操作搜索声敏反应测试仪的话，那么肯定没有这么高大上的东西。但仔细想想，这玩意像什么？</p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/12/16/20211216000305.png" alt="image-20211215174331829"></p><blockquote><p>像不像一个蜂鸣器+秒表？</p></blockquote><p>顺着秒表的思路去搜索<code>arduino秒表</code>果然有一些参考资料了。</p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/12/16/20211216000310.png" alt="image-20211215174807370"></p><p>一个按键开始，一个按键停止，把这个秒表做成反应测试仪也是可以的，只不过差了一个蜂鸣器做成声敏。如果能够把蜂鸣器加到这个电路中并且跑起来的话那么我的课设计算有着落了。可是怎么接？要知道我是零基础啊！</p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/12/16/20211216000318.png" alt="image-20211215175044965"></p><p>所以只能摸打滚爬，开始去了解一些基本原理，在上面装置的基础上加上蜂鸣器，让蜂鸣器开始响一声之后启动秒表然后自己听到蜂鸣器的响声之后立刻按下按钮，然后输出这个过程是时间。如果能实现这个的话，那么我的课设就基本完成了。</p><p>可是要怎么接？arduino上面的孔要怎么插？面包板的电路原理是怎样的？我上课的时候都没有思考过这些问题，都是照着教程和图片插线的，根本就没想过这些问题，为什么有的电路要用电阻？有的却不用？明明都是一样的目的，为什么一个可以用电阻，一个可以不用？真的想不明白。</p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/12/16/20211216000321.png" alt="image-20211215175654903"></p><h2 id="明白面包板原理"><a href="#明白面包板原理" class="headerlink" title="明白面包板原理"></a>明白面包板原理</h2><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/12/16/20211216000325.png" alt="image-20211215180156584"></p><p>上面这个秒表的装置，看一下面包板的电路，看到那些绿色的荧光线了没有？中间是上下连通导电而左右不导电，两边是左右连通，上下不导电。中间凹槽隔缘了两边电路，如果要连接就需要用到导线。</p><p>理解了面包板原理了，那么按键如何控制蜂鸣器发声？或者arduino如何监听按键是否按了？</p><h2 id="arduino代码理解"><a href="#arduino代码理解" class="headerlink" title="arduino代码理解"></a>arduino代码理解</h2><p>上面秒表的代码如下：</p><pre data-enlighter-language="c++">unsigned long startTime,finishedTime,passedTime;void setup() {// put your setup code here, to run once:Serial.begin(9600);pinMode(2,INPUT);pinMode(3,INPUT);Serial.println(“按第一个按钮开始/重置，按第二个按钮计时。”);}void loop() {  // put your main code here, to run repeatedly: if(digitalRead(2)) {  startTime=millis();  delay(200);//按钮消抖  Serial.println(“开始…”);  } if(digitalRead(3)) {   finishedTime=millis();   delay(200);   passedTime=finishedTime-startTime;   display_time(passedTime);  }}void display_time(unsigned long t){  float h ,m, s, ms;  unsigned long left;  h=int(t/3600000);//一个小时3600秒  left = t%3600000;//除去小时数剩余的毫秒数  m = int(left/60000);  left = left%60000;  s=int(left/1000);  left = left%1000;  ms=left;  Serial.println(“原始毫秒数为：”+String(t));  Serial.println(“转换后的时间：”);  Serial.print(“时：”);  Serial.print(h,0);  Serial.print(“分：”);  Serial.print(m,0);  Serial.print(“秒：”);  Serial.print(s,0);  Serial.print(“毫秒：”);  Serial.println(ms,0);  }</pre><p><strong>代码结构示意图</strong></p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/12/16/20211216000331.png" alt="image-20211215181918257"></p><h2 id="代码监听元器件-如何控制元器件"><a href="#代码监听元器件-如何控制元器件" class="headerlink" title="代码监听元器件-如何控制元器件"></a>代码监听元器件-如何控制元器件</h2><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/12/16/20211216000336.png" alt="image-20211215190441172"></p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/12/16/20211216002023.png" alt="image-20211215190704482"></p><p>我的乖乖，我一直以为arduino上面那些1-9的数字是电压值，没想到是引脚号，不同应交的接上不同的元器件，相当于：</p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/12/16/20211216000341.png" alt="image-20211215190934590"></p><p>然后arduino代码中只要控制对应的引脚号中的值就能控制面包板上的元器件，我的乖乖！</p><p><strong>随便看个简单的蜂鸣器案例或许就明白了</strong></p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/12/16/20211216000346.png" alt="image-20211215191237745"></p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/12/16/20211216000349.png" alt="image-20211215191513364"></p><h2 id="如何实现按钮-蜂鸣器实现按一下哔一下？"><a href="#如何实现按钮-蜂鸣器实现按一下哔一下？" class="headerlink" title="如何实现按钮+蜂鸣器实现按一下哔一下？"></a>如何实现按钮+蜂鸣器实现按一下哔一下？</h2><p><strong>代码</strong></p><p>代码的话我在网上找到了，可气的是CSDN作者竟然没给出电路图，这咋办？</p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/12/16/20211216000354.png" alt="image-20211215192453509"></p><blockquote><p><a href="https://blog.csdn.net/weixin_50198463/article/details/121485240?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~aggregatepage~first_rank_ecpm_v1~rank_v31_ecpm-2-121485240.pc_agg_new_rank&utm_term=%E8%9C%82%E9%B8%A3%E5%99%A8%E6%8C%89%E4%B8%80%E4%B8%8B%E5%93%8D%E4%B8%80%E4%B8%8B&spm=1000.2123.3001.4430">原文链接</a></p></blockquote><pre data-enlighter-language="c">#define buzzer 3        //定义buzzer I/O number is 7;#define KEY 2            //定义key I/O NUMBER IS 2;int KEY_NUM = 0;        //按键变量赋初值void BUZZER(){    for (int i = 0; i < 80; i++) { //输出一个频率的声音        digitalWrite(buzzer, HIGH); //发声音        delay(1);//延时1ms        digitalWrite(buzzer, LOW); //不发声音        delay(1);//延时1ms  }}   void ScanKey() {  KEY_NUM = 0;  if (digitalRead(KEY) == LOW)             //有按键按下{ delay(80);    if (digitalRead(KEY) == LOW) {      KEY_NUM = 1;             //变量设置为1      while(digitalRead(KEY) == LOW);             //等待按键松手    }  }  if (KEY_NUM == 1)    BUZZER();}void setup(){  pinMode(KEY, INPUT_PULLUP);         //定义keyI/O is INPUT_PULLUP  pinMode(buzzer, OUTPUT);             //定义buzzer I/O is OUTPUT  Serial.begin(300);}void loop(){  ScanKey();            //按键扫描程序，当按键按下时，该子程序会修改key-num的值}</pre><p><strong>电路图</strong></p><p>对我这种小白，垃圾白来说，必须要电路图和代码才能把功能给实现出来。没电路图怎么办？只能自己根据上面的发现自己尝试折腾一下咯，还能怎办？</p><blockquote><p>在线arduino模拟器</p><p><a href="https://wokwi.com/arduino/projects/318056720122249793">点击打开</a></p></blockquote><p>按照思路就是，buzzer（蜂鸣器）接入3号引脚，KEY（按钮）接入2号引脚。因为两者是不同的元器件，所以各自接入不同的GND中，或许也可以接入同一个GND中，但是我没调通，入门暂且就先这么认为吧。如图所示：</p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/12/16/20211216000400.png" alt="image-20211215232430137"></p><p>研究把GND放同一个地方也可以：</p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/12/16/20211216000405.png" alt="image-20211215233103940"></p><h2 id="两个按钮控制同一个蜂鸣器如何实现？"><a href="#两个按钮控制同一个蜂鸣器如何实现？" class="headerlink" title="两个按钮控制同一个蜂鸣器如何实现？"></a>两个按钮控制同一个蜂鸣器如何实现？</h2><p>实际上就只需要思考如何添加新的按钮到arduino上还有代码需要怎么改而已。一步一步来吧，首先arduino上怎么加装一个按钮？我的思路是，两个按钮是同一个元器件，这样的话我尝试把另一个按钮接到4号引脚上，再把GND接在同一个孔位上。</p><p><strong>线路图：</strong></p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/12/16/20211216000412.png" alt="image-20211215233249635"></p><p><strong>代码：</strong></p><pre data-enlighter-language="c">#define buzzer 2        //定义buzzer I/O number is 7;#define KEYO 3            //定义key I/O NUMBER IS 2;#define KEYT 4            //定义key I/O NUMBER IS 2;int KEY_NUM = 0;        //按键变量赋初值void BUZZER() {  for (int i = 0; i < 80; i++) { //输出一个频率的声音    digitalWrite(buzzer, HIGH); //发声音    delay(1);//延时1ms    digitalWrite(buzzer, LOW); //不发声音    delay(1);//延时1ms  }}void ScanKey() {  KEY_NUM = 0;  if (digitalRead(KEYO) == LOW)             //有按键按下  { delay(80);    if (digitalRead(KEYO) == LOW) {      KEY_NUM = 1;             //变量设置为1      while (digitalRead(KEYO) == LOW);             //等待按键松手    }  }  if (digitalRead(KEYT) == LOW)             //有按键按下  { delay(80);    if (digitalRead(KEYT) == LOW) {      KEY_NUM = 1;             //变量设置为1      while (digitalRead(KEYT) == LOW);             //等待按键松手    }  }  if (KEY_NUM == 1)    BUZZER();}void setup(){  pinMode(KEYO, INPUT_PULLUP);         //定义keyI/O is INPUT_PULLUP  pinMode(KEYT, INPUT_PULLUP);         //定义keyI/O is INPUT_PULLUP  pinMode(buzzer, OUTPUT);             //定义buzzer I/O is OUTPUT  Serial.begin(300);}void loop(){  ScanKey();            //按键扫描程序，当按键按下时，该子程序会修改key-num的值}</pre><p>新增了按键KEYO、KEYT（按键1、按键2），注意代码的变化，理解代码。</p><p>这样我就能够学会两个按键控制一个蜂鸣器了，这样的话再结合秒表的代码，其中按键1按下之后给出提示语<strong>“等下听到哔一声之后立刻按下按钮”</strong>的提示，然后再延迟4s出提示语且开始计时。但我们按下按键2之后，就触发截至计时且计算时间和输出结果。</p><p>所以整个思路就这样，还行吧，强行学习。从被动学习变成主动学习，效率高上一倍。实际上我只是一个下午和一个晚上的研究就把这个思路想出来了。所以迫不得已写下这篇文章记录一下接触arduino的过程，也不知道自己后面还会不会再接触arduino，当然入门了就挺好的。</p><h2 id="简易版声敏反应测试仪"><a href="#简易版声敏反应测试仪" class="headerlink" title="简易版声敏反应测试仪"></a>简易版声敏反应测试仪</h2><p>电路图出来了，就差代码了，代码其实也很简单。秒表的核心代码我已经拿过来了，我只需要更改按键1和按键2的判断执行的内容就行了，详细请看代码：</p><pre data-enlighter-language="c">#define buzzer 7    //定义buzzer I/O number is 7;#define KEY 2     //开始按钮#define KEYO 3   //结束按钮int KEY_NUM = 0;    //按键变量赋初值unsigned long startTime, finishedTime, passedTime;//蜂鸣器发声方法void BUZZER() {  for (int i = 0; i < 80; i++) { //输出一个频率的声音    digitalWrite(buzzer, HIGH); //发声音    delay(1);//延时1ms    digitalWrite(buzzer, LOW); //不发声音    delay(1);//延时1ms  }}//时间换算方法void display_time(unsigned long t) {  float h , m, s, ms;  unsigned long left;  h = int(t / 3600000); //一个小时3600秒  left = t % 3600000; //除去小时数剩余的毫秒数  m = int(left / 60000);  left = left % 60000;  s = int(left / 1000);  left = left % 1000;  ms = left;  Serial.println("原始毫秒数为：" + String(t));  Serial.println("转换后的时间：");  Serial.print("时：");  Serial.print(h, 0);  Serial.print("分：");  Serial.print(m, 0);  Serial.print("秒：");  Serial.print(s, 0);  Serial.print("毫秒：");  Serial.println(ms, 0);}//按键响应方法void ScanKey() {  //  KEY_NUM = 0;  //  按键1开始计时  if (digitalRead(KEY) == LOW)      //有按键按下  {    if (digitalRead(KEY) == LOW) {      //      KEY_NUM = 1;      //变量设置为1      //while (digitalRead(KEY) == LOW);     //等待按键松手      Serial.println("听到哔一声，立刻按下按钮！");      delay(4000);      BUZZER();      startTime = millis();    }  }  //  按键2停止且输出计时  if (digitalRead(KEYO) == LOW) {    finishedTime = millis();    delay(200);    passedTime = finishedTime - startTime;    display_time(passedTime);  }}void setup(){  pinMode(KEY, INPUT_PULLUP);     //定义keyI/O is INPUT_PULLUP  pinMode(KEYO, INPUT_PULLUP);     //定义keyI/O is INPUT_PULLUP  pinMode(buzzer, OUTPUT);      //定义buzzer I/O is OUTPUT  Serial.begin(9600);}void loop(){  ScanKey();      //按键扫描程序，当按键按下时，该子程序会修改key-num的值}</pre><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/12/16/20211216000418.png" alt="1940129568-林子愉-3"></p><p>上传代码到arduino且打开串口监听器：</p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/12/16/20211216000422.png" alt="1940129568-林子愉"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>做完项目我就迫不及待地想记录下来，当然还有很多地方没写好，我更想把自己从无到有的思路写出来，不过感觉挺难的，当时思考、获得启发的资料都没有保存下来，只能直接写了。下面我想分享出一些我觉得好用的东西：</p><p><strong>电路图设计工具（fritzing）：</strong></p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/12/16/20211216000427.png" alt="image-20211215235243556"></p><p><strong>在线arduino模拟器（WOKWI）：</strong></p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/12/16/20211216000431.png" alt="image-20211215235326427"></p><p><strong>我的课设成果：</strong></p><p>这门课本来就是体验课，老师其实也是知道我们班里的人的水平参差不齐，都是鼓励我们做出来，不要求做得有多好，能够入门，体会到arduino的好玩就可以了，这个还让我感觉挺不错的。也是能够研究下去的原因，所以我的成品就是有点简陋，不过对于我来说感觉真的挺不错了，毕竟是入门就可以弄成这样了~（尴尬不失礼貌的微笑）</p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/12/16/20211216000437.jpg"></p><p><strong>参考材料：</strong></p><ul><li><a href="https://blog.csdn.net/weixin_50198463/article/details/121485240?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~aggregatepage~first_rank_ecpm_v1~rank_v31_ecpm-2-121485240.pc_agg_new_rank&utm_term=%E8%9C%82%E9%B8%A3%E5%99%A8%E6%8C%89%E4%B8%80%E4%B8%8B%E5%93%8D%E4%B8%80%E4%B8%8B&spm=1000.2123.3001.4430">Arduino 蜂鸣器+按键 （按一下响一声）</a></li><li><a href="https://www.jianshu.com/p/c358e6fc8baf">Arduino第一行代码——Hello World</a></li><li><a href="https://blog.csdn.net/qq_43813140/article/details/103263200">Arduino蜂鸣器与按键的结合</a></li><li><a href="https://blog.csdn.net/ling3ye/article/details/52933792">Arduino 用两个按键分别控制两个LED灯点亮</a></li><li><a href="https://www.kidscoding8.com/27079.html">arduino从零开始（31）制作秒表</a></li><li><a href="https://www.qutaojiao.com/4627.html">（二十）arduino入门：蜂鸣器的使用</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/12/16/20211216000242.jpg&quot; alt=&quot;IMG_20211215_002106&quot;&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="硬件" scheme="https://www.nothinglin.ml/categories/%E7%A1%AC%E4%BB%B6/"/>
    
    
    <category term="arduino编程" scheme="https://www.nothinglin.ml/tags/arduino%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>实用工具 | 本地电脑挂载阿里云盘</title>
    <link href="https://www.nothinglin.ml/2021/12/14/%E8%B5%84%E6%BA%90%E4%B8%8E%E5%B7%A5%E5%85%B7/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7-%E6%9C%AC%E5%9C%B0%E7%94%B5%E8%84%91%E6%8C%82%E8%BD%BD%E9%98%BF%E9%87%8C%E4%BA%91%E7%9B%98/"/>
    <id>https://www.nothinglin.ml/2021/12/14/%E8%B5%84%E6%BA%90%E4%B8%8E%E5%B7%A5%E5%85%B7/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7-%E6%9C%AC%E5%9C%B0%E7%94%B5%E8%84%91%E6%8C%82%E8%BD%BD%E9%98%BF%E9%87%8C%E4%BA%91%E7%9B%98/</id>
    <published>2021-12-13T16:17:01.000Z</published>
    <updated>2021-12-15T17:05:46.040Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/12/14/20211214011913.png" alt="image-20211214002004307"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>网盘资料库一直都有想弄，但是苦于没找到一个靠谱的网盘来存资料。百度网盘虽然容量大，但是速度真的惨不忍睹，那个限速真的离谱。一开始是超级会员的时候使用体验还是非常不错的，可是过期之后在上面的文件就要去找插件来下载了。而且网盘的资料放在上面进行分享，如果是非会员账号基本都会被劝退。所以每次找资料遇到放在百度网盘的这种都基本关掉找下一个，真的太麻烦了。</p><p>Onedrive可能也是大多数人推荐的，但是普通账号只有5G，教育类账号可能有几个T这样子，我有尝试用学校的邮箱注册了一个Onedrive账号，有1T大小左右的容量吧，但是你也知道，Onedrive的服务器是在海外的，这就意味着我们访问的速度也非常有限，而且我这个教育类账号就怕我毕业之后就被学校回收了，这样存里面的资料不就很危险吗？所以想想也放弃了Onedrive。</p><p>后面看到了有大佬开发了一些插件，可以不限速上传和下载文件，但是托管在google drive上面的。当时因为自己还是有能力访问google drive所以就尝试了，况且Google drive 也有15G，这也挺好的。插件好像叫啥来着，GOindex，搭建之后的界面就是这样子的，文件在Google drive里面进行管理，这一个界面是不支持文件管理的，只支持下载和预览。</p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/12/14/20211214011919.png" alt="image-20211214003453012"></p><p>还有一个叫GDindex，这个是用来上传文件的：</p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/12/14/20211214011924.png" alt="image-20211214003545857"></p><p>为了搞这个谷歌网盘，用了两个插件，一个用来预览和下载，一个用来上传。我们都知道正常情况下我们的文件是上传不去到谷歌网盘中的，不过这些插件利用了cloudflare workers的一些免费资源来实现在谷歌网盘上高速上传和下载。所以这也就挺吸引我的，我就搞了这么一个15G的个人网盘。其实一开始是搞了一个谷歌网盘无限容量的团队盘来着，后面不知道为什么自己消失了。消失就消失了吧，我也不敢在哪里存一些重要的资料，毕竟是谁也能查看的团队盘。</p><p>但是后面问题就来了，文件上传GDindex的bug就来了，不能上传大文件，那这有什么用，难道又要挂外网来上传吗？太麻烦了，所以今天我在博客中放入个人网盘的时候就测试了一下上传的问题，发现这个bug让我很不舒服，所以这个个人网盘我决定放弃了。</p><p>既然放弃旧爱，肯定是有了新欢。阿里云盘听说打着不限速这个特征来吸粉，而且不停的送容量。我就去了解了一下，其实我在阿里云盘内测的时候就有了解。今天算是了解的更细致一点吧，所以才决定使用它作为我的资料库。</p><p>内测的时候领了好几T的容量，不过那时因为说这些容量期限只有一年我就放弃了。要一年有何用？现在手机换号码了，以前的内测账号找不回来了，呜呜~</p><p>现在思想成熟多了之后，再次注册新的账号，开局有100G的空间容量。这时的我竟然满足了，我觉得100G存放一些书籍资料完全够用的。换做以前，已经弄了7T了还是不满足，还想要更大的空间，这就是人性的贪婪吧。</p><p>100G挺好的了，关键还要看一下速度怎样。试了一下上传163M的电子书，都是秒传，可能也跟我的网速有关吧，下载基本跑满自己的网速，这就很好了。要是能分享的话，哪怕像百度网盘那样分享的话就更好了，试了一下分享，结果还真可以，完全就可以当个人网盘了。所以存资料就决定用阿里云盘了。再加上后面做了一些任务，现在已经获得了800多G的永久空间容量，绝对够了。</p><h2 id="网友吐槽"><a href="#网友吐槽" class="headerlink" title="网友吐槽"></a>网友吐槽</h2><p>有的网友对阿里云盘进行吐槽，有的网友对阿里云盘进行质疑。这些都是可以理解的，毕竟前几个月前，我也是这个大军中的一员。</p><p><strong>吐槽</strong></p><p>吐槽什么呢？吐槽空间容量有期限，实际永久空间容量小，只有那么几百G。真的已经够了，我们不是视频剪辑的话或者喜欢收藏电影的话，完全是够用的，对于存放个人资料。</p><p><strong>质疑</strong></p><p>质疑什么呢？质疑未来阿里云盘会不会变卦，转回限速这种下三流手段收割韭菜吗？我也有些怀疑，不过我看了一些人的分析之后也没怎么担心这个问题了。唉，真这么搞也没办法，顶多到时冲个会员把资料下载回来转地方。</p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/12/14/20211214012022.png" alt="image-20211214005843514"></p><h2 id="阿里云盘本地挂载"><a href="#阿里云盘本地挂载" class="headerlink" title="阿里云盘本地挂载"></a>阿里云盘本地挂载</h2><p>因为测试了阿里云盘的速度，果然是杠杠的。网上也有很多将阿里云盘挂载为本地磁盘的方法，相当于一个本地的云盘一样，和云端是同步。里面的文件可以直接打开运行，当然这也是比较吃网速的，毕竟是云端。就像Onedrive云端备份那样，不过速度肯定是更快的。</p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/12/14/20211214011930.png" alt="image-20211214010222786"></p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/12/14/20211214011934.gif" alt="radomCode"></p><p>上面是我已经完成挂载的效果图，是不是很爽？当然是在处理普通文件的时候会适合一些，视频一般都能打开直接看，虽然是存在阿里云盘上的，就看你的网速咯，网速好的话打开里面的文件就跟打开本地文件一样方便。</p><h2 id="如何挂载阿里云盘"><a href="#如何挂载阿里云盘" class="headerlink" title="如何挂载阿里云盘"></a>如何挂载阿里云盘</h2><blockquote><p><a href="https://www.52pojie.cn/thread-1490131-1-1.html">https://www.52pojie.cn/thread-1490131-1-1.html</a></p><p>这个网站是原帖，大家可以进入了解和下载对应的插件进行硬盘的挂载，其实不难就安装个软件，在软件里登录阿里云盘就挂载成功了。</p></blockquote><p><strong>插件下载</strong></p><p>下载我就不演示了，直接到原贴中的下载地址中下载一个安装包就行了。安装也不讲了，直接选择自己的路径安装就行了。</p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/12/14/20211214011938.png" alt="image-20211214011147087"></p><p><strong>挂载</strong></p><p>安装成功后会进入一个界面</p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/12/14/20211214011943.png" alt="image-20211214011431865"></p><p>一开始我们需要注册一个账号，在这个界面中的，也就是这个插件的账号，方便管理你的电脑挂载。</p><p>注册账号的时候就要你选择你要新建的挂载类型和盘符，本地挂载就选本地，选网盘好像没啥用，选网盘还不如直接下载阿里网盘的app，就选本地挂载。然后就选择阿里云盘进行挂载就行，扫码登录。</p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/12/14/20211214011947.gif" alt="rade"></p><h2 id="完毕"><a href="#完毕" class="headerlink" title="完毕"></a>完毕</h2><p>上面的步骤走完后，你打开我的电脑就能看到新增的盘了。</p><p>这篇内容就写到这里吧~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/12/14/20211214011913.png&quot; alt=&quot;image-20211214002004307&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="资源与工具" scheme="https://www.nothinglin.ml/categories/%E8%B5%84%E6%BA%90%E4%B8%8E%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="实用工具" scheme="https://www.nothinglin.ml/tags/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>博客优化 | 给博客添加一个在线聊天系统插件“TIDIO”和谈谈我的感受</title>
    <link href="https://www.nothinglin.ml/2021/12/08/Hexo/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96-%E7%BB%99%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E4%B8%80%E4%B8%AA%E5%9C%A8%E7%BA%BF%E8%81%8A%E5%A4%A9%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6-%E6%88%91%E7%9A%84%E6%84%9F%E5%8F%97/"/>
    <id>https://www.nothinglin.ml/2021/12/08/Hexo/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96-%E7%BB%99%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E4%B8%80%E4%B8%AA%E5%9C%A8%E7%BA%BF%E8%81%8A%E5%A4%A9%E7%B3%BB%E7%BB%9F%E6%8F%92%E4%BB%B6-%E6%88%91%E7%9A%84%E6%84%9F%E5%8F%97/</id>
    <published>2021-12-08T12:20:33.000Z</published>
    <updated>2021-12-13T16:14:50.313Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2021/12/08/aix3NByPkQFYzqn.png" alt="image-20211208203357368"></p><h2 id="TIDIO"><a href="#TIDIO" class="headerlink" title="TIDIO"></a>TIDIO</h2><blockquote><p>简单地概述TIDIO是干什么的话：</p><p>TIDOIO相当于是一个在线的客服系统，也就是一个在线系统聊天插件。在网页中为用户提供与网站后台工作人员交流的一个聊天窗口，也为后台工作人员提供回复信息的工作台。</p></blockquote><p>这样说得比较抽象，就列举一下我是怎么利用这个平台的，具体需求才能明白它是干嘛的。</p><p>我的想法是，我想在我的hexo博客中放入一个可以进行在线聊天的插件，这样的话如果有读者想直接跟我聊天的话就直接点开聊天窗口进行对我发信息，进行及时聊天。这不同于留言，留言不是及时聊天的，这个插件如果我把后台系统打开，读者如果给我发信息的话，我的电脑会给我提示有人给我发信息，这样如果我在线的话就可以直接开始聊天了，这样的功能还是很爽的。</p><h2 id="怎么发现TIDIO的？"><a href="#怎么发现TIDIO的？" class="headerlink" title="怎么发现TIDIO的？"></a>怎么发现TIDIO的？</h2><p>真的是偶然发现，我的博客不是最近更新了<strong>说说</strong>功能吗，也就是<strong>随想录</strong>那个页面功能，使用<a href="https://artitalk.js.org/">Artitalk.js</a>这个插件实现的，当然这些都是题外话，也就是我实现了这个功能之后，我到官网中查看别人安装成功的案例，也就是去别人的博客中查看别人的说说功能做得怎样。</p><p>也就是在这个时候，我发现了两个人的博客中有这么一个有趣的功能，那就是在线聊天系统。</p><ul><li><a href="https://notes.zhangxiaocai.cn/artitalk/">斯莫笔记</a>（crisp）</li><li><a href="https://langkye.gitee.io/shuoshuo/">水墨社区</a>（tidio）</li></ul><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/12/8/20211208222658.png" alt="image-20211208205613551"></p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/12/8/20211208222704.png" alt="image-20211208205646074"></p><p>从上面可以看出，一个是<strong>powered by crisp</strong>，一个是<strong>powered by tidio</strong></p><p>crisp和tidio其实在功能上大致差不多，只不过tidio用起来会比crisp舒服一些，当然tidio的使用限制也比crisp多许多，具体区别下面再讨论。</p><p>所以看到这里，我就发现，原来hexo博客还可以搞个聊天系统，于是我就点击分别进入了crisp和tidio两个官网中了解，最后我还是选择了tidio，可能是使用体验好的原因吧，下面我会稍微比较一下两者的区别，我现在只是单纯从使用体验上选择并安装了tidio插件。</p><p>这就是我遇见这两个插件的缘故。</p><h2 id="crisp"><a href="#crisp" class="headerlink" title="crisp"></a>crisp</h2><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/12/8/20211208222718.png" alt="image-20211208210349416"></p><h3 id="了解crisp特征"><a href="#了解crisp特征" class="headerlink" title="了解crisp特征"></a>了解crisp特征</h3><p>进入一个官网首先要知道它是做什么的，先找到官网中介绍资料来了解一下。</p><ul><li>共享收件箱</li><li>客户关系管理</li><li>共同浏览</li><li>活动</li><li>聊天机器人</li><li>在线聊天</li><li>知识库</li></ul><p>上面分别是官网给出crisp的基本特征，我要使用的功能就是在线聊天，其他的就先不理了。其实我对知识库的功能还是挺好奇，不知道它能干什么，能构建一个系统的知识库吗？像gitbook一样？先不管它，这里讨论在线聊天系统。</p><h3 id="了解收费标准"><a href="#了解收费标准" class="headerlink" title="了解收费标准"></a>了解收费标准</h3><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/12/8/20211208222725.png" alt="image-20211208212432276"></p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/12/8/20211208222730.png" alt="image-20211208212706440"></p><p>上面的收费等级分别为普通用户、会员、超级会员三个等级。像知识库这个页面功能还是需要开通超级会员才能用的。所以说，对于白嫖，这只能使用在线聊天系统。</p><h2 id="TIDIO-1"><a href="#TIDIO-1" class="headerlink" title="TIDIO"></a>TIDIO</h2><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/12/8/20211208222734.png" alt="image-20211208203357368"></p><h3 id="了解TIDIO特征"><a href="#了解TIDIO特征" class="headerlink" title="了解TIDIO特征"></a>了解TIDIO特征</h3><ul><li>在线聊天</li><li>聊天机器人</li><li>信使</li><li>电子邮件收件箱</li></ul><p>这样看来，TIDIO更像专注服务于在线聊天系统方面上的，其他的附加功能比较少。</p><h3 id="了解收费标准-1"><a href="#了解收费标准-1" class="headerlink" title="了解收费标准"></a>了解收费标准</h3><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/12/8/20211208222743.png" alt="image-20211208213542255"></p><p>tidio可以支持每个月接受100个访问者访问，因为用户找我们聊天的时候需要输入邮箱，一个邮箱代表一个访问者，一个月最多只能支持100位。其实对于我们这些个人博客来说已经足够了，对于网店来说就必须要升级才能享受更多的体验。</p><h2 id="使用体验比较"><a href="#使用体验比较" class="headerlink" title="使用体验比较"></a>使用体验比较</h2><p>crisp从管理员使用角度来看有点不咋滴，因为如果用户进行页面刷新之后，聊天的内容将全部被清空，我如果再给对方回复的时候，对方是无法再收到了的，也就是没有缓存机制，同一个用户刷新之后必须要用户再发一条内容之后能再次及时聊天，否则管理员是无法找到用户进行聊天的。</p><p>tidio这方面就做得比较好，如果用户进行页面刷新之后，管理员给用户发信息同样也还能收到，聊天框中的内容也还在，可能过一段时间之后缓存就会被清除，不过至少还能保持这次聊天进行的质量，不会发生页面一刷新就又要用户重新找管理员，管理员给用户发信息，用户也能收到。</p><p>综合上面的判断和选择，我最终从使用体验的角度选择了tidio。</p><p>当然这是我个人的主观选择，不同人可以根据不同分析进行选择。</p><h2 id="hexo博客安装TIDIO"><a href="#hexo博客安装TIDIO" class="headerlink" title="hexo博客安装TIDIO"></a>hexo博客安装TIDIO</h2><h3 id="注册一个tidio账号"><a href="#注册一个tidio账号" class="headerlink" title="注册一个tidio账号"></a>注册一个tidio账号</h3><p>注册这里比较简单，不过多阐述</p><h3 id="配置聊天样式"><a href="#配置聊天样式" class="headerlink" title="配置聊天样式"></a>配置聊天样式</h3><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/12/8/20211208222751.png" alt="image-20211208215747432"></p><p>对于样式的话根据自己的个性化需求进行设置。</p><h3 id="获取JavaScript代码"><a href="#获取JavaScript代码" class="headerlink" title="获取JavaScript代码"></a>获取JavaScript代码</h3><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/12/8/20211208222755.png" alt="image-20211208220104029"></p><h3 id="往hexo博客中插入TIDIO代码"><a href="#往hexo博客中插入TIDIO代码" class="headerlink" title="往hexo博客中插入TIDIO代码"></a>往hexo博客中插入TIDIO代码</h3><p>这就是一个插件，也就是我们在控制台注册了之后直接获得一个JavaScript脚本代码，往hexo博客中插入就行了。</p><p>将这段代码插入到博客的页脚当中就可以显示一个聊天系统的图标了。</p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/12/8/20211208222800.png" alt="image-20211208220240126"></p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/12/8/20211208222805.png" alt="image-20211208220423890"></p><blockquote><p>注意：因为我的这个hexo博客主题是我自己开发的，所以其他主题的要找到首页文件或者专门放脚本的地方来插入这个在线聊天系统插件脚本。</p></blockquote><h3 id="小插曲"><a href="#小插曲" class="headerlink" title="小插曲"></a>小插曲</h3><p>不知道你们生成的脚本代码直接插入可不可以，我的是不可以正常显示，为此我还专门去找了TIDIO的官方技术顾问进行咨询。也是报了试一下的心态咨询了一下，一开始是人机感觉还好，后面我的问题都解决不了，一通乱按之后，机器人就给我转人工服务了。我的天，有点小紧张，我这九流的英语水平，怕描述不清楚问题，不过一切发展还是挺顺利的，这也是我第一次用英语跟外国人咨询。哈哈，感觉还是挺牛逼的，毕竟是第一次用英语交流讨论并且把问题都解决了，这让我对英语产生更浓厚的兴趣了。</p><p><img src="https://s2.loli.net/2021/12/08/7fF6ZdpoyRXVwsI.png" alt="img"></p><p>最后他跟我说，可能是我的页面没有部署开来，在demo页面中需要使用https来对JavaScript文件进行请求，所以他给我发了一份修改后的代码，最后我运行出来了。</p><p>真的感觉很牛逼，也是这种学习氛围让我对编程越来越喜欢，同时也越来越喜欢英语了。</p><p><strong>修改前的代码：</strong></p><pre data-enlighter-language="JavaScript"><script src="//code.tidio.co/hk48rdop6yczga3mpktspvcwes4taqbz.js" async></script></pre><p><strong>修改后的代码：</strong></p><pre data-enlighter-language="javascript"><script src="https://code.tidio.co/hk48rdop6yczga3mpktspvcwes4taqbz.js" async></script></pre><h2 id="总结和感想"><a href="#总结和感想" class="headerlink" title="总结和感想"></a>总结和感想</h2><p>通过这次折腾在线聊天系统插件，我对我自己的学习观又有了一些了解了。为什么我会想去安装搭建这样一个在线聊天系统？因为我对这样一个系统插件安装在我的博客上充满了期待，就是因为我想要或者我感兴趣。当遇到问题，我按照要求插入代码之后发现了一些问题自己解决不了之后，为什么我会尝试与国外开发人员用英语向他们咨询自己遇到的问题？因为我想迫切解决自己的需求，想把这个问题给处理掉。</p><p>之所以有了这一次也是第一次向国外技术人员咨询技术上的问题，主要都是源于我的兴趣和需求。这百分之百是一种高效的学习过程和主动学习。</p><p>学习就应该是这样的，有一个浓厚的兴趣和一个明确的目的作为支撑，才能够进行主动和高效的学习。所以今天的收获就是：</p><ul><li>学习了如何给博客插入TIDIO聊天系统插件</li><li>体验了一次与国外技术开发人交流的过程</li><li>收获高效学习的重要成分之一</li></ul><p>以上就是这篇文章的全部内容~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2021/12/08/aix3NByPkQFYzqn.png&quot; alt=&quot;image-20211208203357368&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;TIDIO&quot;&gt;&lt;a href=&quot;#TIDIO&quot; class=&quot;h</summary>
      
    
    
    
    <category term="博客" scheme="https://www.nothinglin.ml/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="博客优化" scheme="https://www.nothinglin.ml/tags/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>思考|造轮子还是用轮子？</title>
    <link href="https://www.nothinglin.ml/2021/12/05/%E7%8B%AC%E7%AB%8B%E6%80%9D%E8%80%83/%E6%80%9D%E8%80%83-%E9%80%A0%E8%BD%AE%E5%AD%90%E8%BF%98%E6%98%AF%E7%94%A8%E8%BD%AE%E5%AD%90%EF%BC%9F/"/>
    <id>https://www.nothinglin.ml/2021/12/05/%E7%8B%AC%E7%AB%8B%E6%80%9D%E8%80%83/%E6%80%9D%E8%80%83-%E9%80%A0%E8%BD%AE%E5%AD%90%E8%BF%98%E6%98%AF%E7%94%A8%E8%BD%AE%E5%AD%90%EF%BC%9F/</id>
    <published>2021-12-05T15:11:55.000Z</published>
    <updated>2021-12-15T17:06:01.442Z</updated>
    
    <content type="html"><![CDATA[<img src="https://NothingLin.coding.net/p/picture/d/picture/git/raw/master/2021/12/6/20211206011645.png" alt="image-20211206011336744" style="zoom: 67%;" /><h2 id="近期的迷茫"><a href="#近期的迷茫" class="headerlink" title="近期的迷茫"></a>近期的迷茫</h2><p>近期的迷茫和焦虑还是很多的，有关于未来的，也有目前的烦恼。未来的问题就是关于实习和考研的选择，毕竟现在已经到了大三并且大三第一学期也即将结束，迎接过来的就是要努力的一年了。目前的问题就是对于学校的课程学习的焦虑，因为我个人挺不喜欢学校的古板教学模式，并不是我对这门课不感兴趣，大部分课堂时间我都是混过去的。其实我也尝试过想利用一下课堂的时间，但是终究是我无法挣脱学校的游戏规则。本来许多课程的知识内容我是挺喜欢的，比如安卓移动应用开发，这是我上学期学的课程。最终还是考试挂科了，原因也是很简单，我不喜欢那个老师的教课模式，最终整学期的课程浑浑噩噩的过去了。</p><p>像安卓移动应用开发本应该是非常好玩的一门课程，自己可以设计与开发出一个好玩的移动app到手机上，然后非常惊叹的和同学说：“这是我开发的手机app”。当然这都是我的幻想，结果我在第三个星期之后彻底失去了上课的兴趣。我最不能忍受的就是，同时也是我发现老师的教学目的是：大家认真听！这个知识点期末一定考！！</p><p>我很失望，你教我安卓就是教我考试的吧？每节课不管是大课还是小课，都跟我们讲一大堆理论。合着都是做一些无聊的组件demo。都不见带着我们完整地接触一个完整的移动端应用开发的整个项目流程，我最期待的还是老师能够带着我们完整的经历一个项目的流程，并且讲解项目里面的技术细节，这样虽然没能学到什么具体细节，但是也能够照猫画虎地仿照一个应用开发，再慢慢地去学习，一点一点的学习。结果摆明这是不可能的，老师直接就跟我们讲一单元一单元的知识内容，还是完全的读PPT，这样一学期下来，合着课程设计的项目也是让我们自己来，自己摸索。唉，本想让老师带着我们做的，结果让我们自己做。因为太失望，导致上学期对安卓一点兴趣都没有，课程设计也是到GitHub引用别人的，结果答辩那个时候一个班出现5、6个课程设计雷同的，最终课程挂科也是注定的，还好后面补考通过了。真的是一言难尽，所谓师者传道授业解惑，自从上大学之后，我觉得大部分老师都不能叫做老师了。</p><p>不过根据上面的迷茫，我总结了几条自己的焦虑：</p><ul><li>考研还是实习？</li><li>如何高效学习？是造轮子还是用轮子？</li><li>未来我会成为什么样的人？码农和架构师之间有什么不同？</li></ul><h2 id="考研or实习？"><a href="#考研or实习？" class="headerlink" title="考研or实习？"></a>考研or实习？</h2><p>大三下学期就需要对考研或者实习做一定的准备了，如果决定考研的必须这个时候就要考试备考了，开始巩固基础知识。如果师决定实习的话也要考试背面试题了。</p><p>我的主观意愿还是趋向于考研的，毕竟我的学历是二本院校的。如果以后想更好的晋升或者进大厂，肯定要有一个好的院校里的学历。但是客观情况来看，我又有点想去实习，毕竟实习有钱拿，可以早日实现经济独立。</p><p>不过从长远的眼光发展来看，考研还是要试一试的。今年12月到明年12月刚好一年的时间备考，希望自己好好把握时间复习，可以考个好的院校吧。</p><h2 id="造轮子还是用轮子？"><a href="#造轮子还是用轮子？" class="headerlink" title="造轮子还是用轮子？"></a>造轮子还是用轮子？</h2><p>这一个问题是来源于这样一个思考：如果我需要实现一个功能，我是需要重新开发这样一个功能轮子呢？还是到开源社区寻找一个已实现的功能轮子进行调用？</p><p>其实对这个问题我自己也是有明确的答案了的，就是要看我的目的了。如果我的目的是处于一个学习的态度的话，那么我就需要自己独立开发这个功能。如果我的目的是快速为该系统实现这个功能的话，我们就需要调用现成的功能库。如果我们对已有的功能库的功能不满意的话，那么我们就需要去魔改轮子了，需要我们去改造这个功能。再者就是没有现成的轮子，只能自己造。</p><p>所以总结一下有以下几种情况：</p><ul><li>以学习为目的</li><li>以系统开发为目的</li><li>对现成功能不满意</li><li>开源库中没有对应功能</li></ul><p>不同的情况就需要用不同的方法去处理。</p><h2 id="未来我想成为哪种人？"><a href="#未来我想成为哪种人？" class="headerlink" title="未来我想成为哪种人？"></a>未来我想成为哪种人？</h2><p>最近我在B站刷到一条视频就是，有位程序Up主跟我们吐槽自己接私活被放飞机的视频。出于好奇我就点击看了一下，Up吐槽的经过是这样子的：</p><blockquote><p>他说有位粉丝求他帮忙开发一个小程序，600块钱。在粉丝的苦苦哀求之下，Up勉强答应了，后面Up被粉丝放飞机了，然后发视频在吐槽粉丝，并且说自己的项目很完备，怎么样怎么样… 表示自己不会再接这种私活了…被放飞机的项目也开源出来分享</p></blockquote><p>因为我对这种私活项目的价格不清楚，我感觉600块钱真的很多了，但是600开发出来的样子会是咋样的？Up也在视频中给我们进行展示，看完之后我也是挺无语的。</p><p>丑陋的界面堪比我的课程设计，如果这个小程序值600的话，我觉得我应该也可以接私活了。我看了下评论区和弹幕，奇怪的是很多人都在说这样的项目600都不够，600也接？起码2000！</p><p>我不知道是不是开玩笑的或者是讽刺的话，真的！那样子就跟我们的课程设计一样，这样的小程序，用来运营还是学校的课程设计答辩？</p><p>如果粉丝是想用来团队比赛运营的话，这样的小程序真的拿不出台面，也难怪粉丝会放飞机。后面我又看了Up的其他视频，有个50000的私活项目。我也比较期待的去观看，50000的开发项目应该长啥样？我最后也还是失望了，界面堪比我的课程设计！可能在服务器运营方面做得比较好，但是根据Up的自述，他应该三十多岁了，还是大厂辞职的，目前主要工作就是在家接私活，发视频。</p><p>不应该！这么长的开发年龄开发出来的项目竟然让我看着像课程设计。真的，去哄一哄大学生让他们做一个项目出来说是要去比赛，他们或许还可以帮你做出一个更完备的项目出来。</p><p>总体来看，我上面说的Up就是我最害怕我最终成为的那种程序员或者码农。一路走过去，没有多大的技术成长，还喜欢唠唠叨叨，斤斤计较，对未来也还总是充满焦虑，忧心忡忡。</p><p>但是又有几位大神是我向往的，比如：稚晖君</p><p>从稚晖君的博客中了解到他从大学本科到研究生这些阶段都不断地做一些小项目，参加比赛，一点一点地进行技术积累，而且他在B站分享地视频都是非常硬核地项目成果演示也非常高质量。最后从Oppo的算法研发岗位到华为的天才少年计划，整个过程都是非常让我受鼓舞的。</p><p>我就是希望自己能够这样一点一点的进行技术积累，能够不断成长起来的这种，而不是成长到某个阶段就到了停滞期，如果跳不出这个停滞期估计后面的人生都要废了。</p><p>而稚晖君在面对网友的提问是如何学习地，他的回答我是真的十分赞同的。</p><blockquote><p>他说他比较喜欢问题驱动型学习，就比如我们在遇到某个问题的时候，我们要解决这个问题，于是我们就有针对性地去学习相关的知识来解决这个问题。或者是在学习完某些知识之后，就设计出一个项目来把这些学过的知识都运用起来，进行更深刻的理解。</p></blockquote><p>我觉得这个回答可以回答困惑我很久的一个问题就是：如何高效学习？</p><p>这个回答对我的学习观的构建起到了一个非常重要的启发作用。</p><p>未来我们就是要面对问题和解决问题，对于基础性的知识就是普及性的浅度理解，对于需要运用来解决问题的知识就要深刻地去理解，运用到现实当中来解决问题。</p><p>未来发展就是这样一个发现问题、分析问题、解决问题、总结问题这样一个过程。</p><p>如果这一个过程做得好的话，我们就跟有可能突破未来的瓶颈期。</p><h2 id="码农和架构师"><a href="#码农和架构师" class="headerlink" title="码农和架构师"></a>码农和架构师</h2><p>根据我自己的理解，码农和架构师之间的关系就是：</p><blockquote><p>架构师把系统设计做出来，把各种系统架构都明确开来，再分派开发任务到底层的码农手上。码农只需要按照自己收到的开发任务，用代码把系统功能给实现出来。</p></blockquote><p>大致就是上面这样一个关系吧。</p><p>所以根据上面的描述，我自己也有了一点思考：</p><blockquote><p>系统设计难？还是代码开发难？</p></blockquote><p>感觉功能代码只要需求明确了，几乎只要是合理的或者是可实现的话，基本代码开发并不难。难的是系统设计，为什么这么说？</p><p>比如一个精美的建筑，拿北京体育馆鸟巢来举例吧，建筑工人在没有建筑设计师的设计稿图的指导之下能不能建成一个鸟巢？</p><p>一个建筑设计师设计稿图的时候需要考虑建筑材质、结构分析、耐损分析等等过程步骤…如果其中哪个环节出问题都会导致建不出高质量的建筑物来，如果受力分析没做好，建筑物还可能面临倒塌的风险。</p><p>同样对于一个软件系统来说，如果没有考虑到各种设计细节的话，那么这个系统就会处于一个不安全的状态。所以从难度和压力的角度来比较的话，架构师的工作会更难和更重要一些，虽然架构师不用重点负责代码开发，但是架构师必须给系统开发指定技术路线，这里就可以看出，架构师其实对技术的理解比码农的层次要高很多。</p><p>码农只要需求明确就可以开干，但是思维不会得到成长，因为软件系统设计的思维调动性要比代码开发强很多，码农给不了系统一个很好的决策，但是系统设计师却能够在面对不同问题的时候给系统一些决策进行调整。</p><p>所以说，从长远的目光发展来看的话，我建议自己不必急于学习什么Java代码开发之类的知识，先学设计，先设计出一个系统项目来，然后再学习对应的编程语言，看那些代码能够实现自己项目中的功能。这就是一种问题驱动型学习思路。</p><p>这就好比有几个比较有争议的话题就是：实践得真理还是真理再实践？</p><p>我比较赞同实践得真理这一说法得，这就是在实践的过程中发现问题、解决问题、总结问题，最后得出真理的一个过程。</p><p>问题驱动型学习思路，系统设计难就难在我们的思考必须要非常全面，如果有什么疏漏的话就回导致不可预期的风险，这需要不断积累和学习地，系统设计明确之后，我们就开始有问题了，我们要怎么实现这些功能，于是我们就带着问题去学习编程语言，比如java，Java可以实现我这个系统中的这个功能吗？然后针对性的学习，再给系统总结技术路线。</p><p>在传统角度上，我们通常都是直接找一本Java的教程书籍，从头到尾刷一遍下去，刷完之后还不知道要做些什么？有些好的书籍还会到我们实战一个项目，但是这些项目是我们要的吗？对我们有意义吗？如果意义不大那么我们学习地效率就很低，因为没多少成就感，没解决我们的问题，还没能运用对应的知识来解决我们的问题，这种状态非常低效。</p><p>学习一门编程语言首先就需要有一个明确的目的，这个编程语言能解决我什么问题，这样我去学它才有意义，否则我不知道它有什么用我就去学它，可能效率会非常低下。</p><p>上面的内容其实很早就像写了，只不过一直梳理不清自己的思路，知道接触<strong>问题驱动型学习</strong>这个思路之后，我才发觉学习设计模式比学习代码开发还要重要。当然包括数据结构和算法分析这些基础知识。希望自己好好消化，慢慢学着去学习基础知识，学习设计模式，学着去发现问题、解决问题…</p>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;https://NothingLin.coding.net/p/picture/d/picture/git/raw/master/2021/12/6/20211206011645.png&quot; alt=&quot;image-20211206011336744&quot; style</summary>
      
    
    
    
    <category term="独立思考" scheme="https://www.nothinglin.ml/categories/%E7%8B%AC%E7%AB%8B%E6%80%9D%E8%80%83/"/>
    
    
    <category term="个人思考" scheme="https://www.nothinglin.ml/tags/%E4%B8%AA%E4%BA%BA%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>IDEA问题 | IDEA新建时没有java class选项</title>
    <link href="https://www.nothinglin.ml/2021/11/13/IDEA%E6%96%B0%E5%BB%BA%E6%97%B6%E6%B2%A1%E6%9C%89java-class%E9%80%89%E9%A1%B9/"/>
    <id>https://www.nothinglin.ml/2021/11/13/IDEA%E6%96%B0%E5%BB%BA%E6%97%B6%E6%B2%A1%E6%9C%89java-class%E9%80%89%E9%A1%B9/</id>
    <published>2021-11-13T14:07:53.000Z</published>
    <updated>2021-12-13T17:24:54.720Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IDEA新建时没有java-class选项"><a href="#IDEA新建时没有java-class选项" class="headerlink" title="IDEA新建时没有java class选项"></a>IDEA新建时没有java class选项</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>很奇怪，我在使用idea创建了一个普通的Java项目的时候我发现，在我想要新建一个java文件的时候，我右键新建发现没有Java class选项，这就让我很郁闷了。我建出来的文件格式是kotlin，虽然我要改后缀为java，但是平时创建Java类的时候就会自动把类名方法给写出来了，没了这个我就需要增加工作量了在使用idea的时候，所以在使用idea的时候这个问题是需要解决的。</p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/9/9/20210909001754.png" alt="image-20210909001228458"></p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/9/9/20210909001801.png" alt="image-20210909001308068"></p><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/9/9/20210909001806.png" alt="image-20210909001355170"></p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/9/9/20210909001811.png" alt="image-20210909001557173"></p><h2 id="最后处理结果"><a href="#最后处理结果" class="headerlink" title="最后处理结果"></a>最后处理结果</h2><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/9/9/20210909001818.png" alt="image-20210909001643833"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;IDEA新建时没有java-class选项&quot;&gt;&lt;a href=&quot;#IDEA新建时没有java-class选项&quot; class=&quot;headerlink&quot; title=&quot;IDEA新建时没有java class选项&quot;&gt;&lt;/a&gt;IDEA新建时没有java class选项&lt;/</summary>
      
    
    
    
    <category term="开发工具" scheme="https://www.nothinglin.ml/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="IDEA使用问题" scheme="https://www.nothinglin.ml/tags/IDEA%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>GIT使用 | 使用idea配置GitHub远程仓库</title>
    <link href="https://www.nothinglin.ml/2021/11/13/Git/%E4%BD%BF%E7%94%A8idea%E9%85%8D%E7%BD%AEGitHub%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/"/>
    <id>https://www.nothinglin.ml/2021/11/13/Git/%E4%BD%BF%E7%94%A8idea%E9%85%8D%E7%BD%AEGitHub%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</id>
    <published>2021-11-13T13:49:48.000Z</published>
    <updated>2021-12-13T17:23:56.344Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用idea配置GitHub远程仓库"><a href="#使用idea配置GitHub远程仓库" class="headerlink" title="使用idea配置GitHub远程仓库"></a>使用idea配置GitHub远程仓库</h1><p>前言：本教程是参考csdn博主的教程进行编写的，编写理由为：</p><ul><li>整理成为适合自己的笔记教程</li><li>害怕博主删除博文之后就没有参考教程了，可说是一种备份吧</li></ul><p>你什么时候会希望使用idea配置git和GitHub进行代码版本管理？前提条件是我们已经有了一个项目等待进行管理，所以我们先要有一个现存的项目。当然我们也要先把git的基本环境配置给准备好先。</p><p>（创建项目的过程和git的环境变量配置过程我就不写了····）</p><h2 id="idea配置导入git"><a href="#idea配置导入git" class="headerlink" title="idea配置导入git"></a>idea配置导入git</h2><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/9/8/20210908175717.gif" alt="菜单文件2"></p><p>这个是教程给出的，我好像没设置过这一步，我的idea直接就可以使用git的了，如果不能正常使用git的话，那么建议不要跳过这一部分，如果git正常使用就直接略过这里吧····</p><h2 id="给项目进行git仓库初始化"><a href="#给项目进行git仓库初始化" class="headerlink" title="给项目进行git仓库初始化"></a>给项目进行git仓库初始化</h2><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/9/8/20210908175727.gif" alt="菜单文件2"></p><p>一般上面的步骤完成之后，验证git仓库是否创建成功可以右键项目文件夹看有没有git选项：</p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/9/8/20210908175732.png" alt="image-20210908162242938"></p><h2 id="熟悉idea的git版本管理，配置GitHub仓库且上传项目"><a href="#熟悉idea的git版本管理，配置GitHub仓库且上传项目" class="headerlink" title="熟悉idea的git版本管理，配置GitHub仓库且上传项目"></a>熟悉idea的git版本管理，配置GitHub仓库且上传项目</h2><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/9/8/20210908175755.gif" alt="菜单文件2"></p><p>通过上面的操作过程我们可以发现，我们如果要将项目推送到GitHub仓库的话，那么我们就需要GitHub仓库的仓库地址，还有一个就是GitHub账号的token令码。</p><h2 id="创建GitHub仓库和创建GitHub的token令牌"><a href="#创建GitHub仓库和创建GitHub的token令牌" class="headerlink" title="创建GitHub仓库和创建GitHub的token令牌"></a>创建GitHub仓库和创建GitHub的token令牌</h2><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/9/8/20210908175812.gif" alt="菜单文件2"></p><blockquote><p>为什么需要token令牌？因为我尝试使用账号、密码进行登录的时候idea给我报错404，后来使用token的方法来和GitHub进行连接就可以了，所以我还是推荐使用token的方法来配置GitHub账号。</p></blockquote><h2 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h2><p>因为我的idea已经和GitHub进行过链接，我已经配置好了token，所以后面我直接push项目到GitHub上就直接上传了，没有弹出账号配置。不过一般都没有什么问题，只要拥有新建的仓库地址和建立的token，后面按照要求一步一步的进行配置就能够将项目上传到GitHub上。push成功之后就到GitHub的仓库中查看，看有没有上传成功，看到仓库上有文件的话就说明idea的git和GitHub的配置基本完成了。</p><h2 id="参考材料"><a href="#参考材料" class="headerlink" title="参考材料"></a>参考材料</h2><p>由于我的笔记更适合我个人来理解，其中疏漏了许多的细节，因此请查阅我这篇笔记的一手资料进行补漏。</p><ul><li><a href="https://blog.csdn.net/u014175572/article/details/55510825">github获取token</a></li><li><a href="https://blog.csdn.net/a749402932/article/details/107148373/">IDEA 使用Git图文详解</a></li><li><a href="https://blog.csdn.net/vast_lee/article/details/111254157">IDEA 连接github 出错 invalid authentication data. 404 Not Found-Not Foun</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;使用idea配置GitHub远程仓库&quot;&gt;&lt;a href=&quot;#使用idea配置GitHub远程仓库&quot; class=&quot;headerlink&quot; title=&quot;使用idea配置GitHub远程仓库&quot;&gt;&lt;/a&gt;使用idea配置GitHub远程仓库&lt;/h1&gt;&lt;p&gt;前言：本教程</summary>
      
    
    
    
    <category term="开发工具" scheme="https://www.nothinglin.ml/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Git" scheme="https://www.nothinglin.ml/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>github登陆权限 | remote: Support for password authentication was removed on August 13, 2021.</title>
    <link href="https://www.nothinglin.ml/2021/09/26/GitHub/remote-Support-for-password-authentication-was-removed-on-August-13-2021/"/>
    <id>https://www.nothinglin.ml/2021/09/26/GitHub/remote-Support-for-password-authentication-was-removed-on-August-13-2021/</id>
    <published>2021-09-26T05:37:37.000Z</published>
    <updated>2021-12-15T17:06:27.754Z</updated>
    
    <content type="html"><![CDATA[<h1 id="发现错误"><a href="#发现错误" class="headerlink" title="发现错误"></a>发现错误</h1><p>我在写hexo博客的时候一般都有一个备份的习惯，就在这次我完成了Nothinglin主题的开发时，将博客主题移至现在这个博客中进行发布且备份时发现，<code>hexo b</code>不能正常备份到我的GitHub仓库中的brandName分支上。</p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/9/26/20210926160202.png" alt="image-20210926153905171"></p><p>首先肯定的是这次备份失败了，但是是什么原因导致失败的呢？仔细阅读了一下那几句英语发现：</p><p><code>remote: Support for password authentication was removed on August 13, 2021.</code></p><blockquote><p>2021年8月13号开始，GitHub客户端不支持密码登录了，我们在客户端不能用密码进行登录验证了，必须要创建一个token指令替代密码！！</p></blockquote><br/><h1 id="错误分析"><a href="#错误分析" class="headerlink" title="错误分析"></a>错误分析</h1><p>一开始没有发现：</p><p><code>Please use a personal access token instead</code></p><p>这句话，也就是说用token替换掉密码来进行登录，所以我遇到问题的第一反应就是找度娘。等我把报错语句进行搜索之后发现了一篇处理此问题的博文：</p><blockquote><p><a href="https://blog.csdn.net/weixin_41010198/article/details/119698015">github开发人员在七夕搞事情：remote: Support for password authentication was removed on August 13, 2021.</a></p></blockquote><p>按照他的方法进行处理之后，我的hexo博客也可以进行正常备份了！</p><br/><h1 id="处理错误"><a href="#处理错误" class="headerlink" title="处理错误"></a>处理错误</h1><h3 id="创建新的token"><a href="#创建新的token" class="headerlink" title="创建新的token"></a>创建新的token</h3><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/9/26/20210926160208.png" alt="image-20210926154826114"></p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/9/26/20210926160212.png" alt="image-20210926154943316"></p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/9/26/20210926160217.png" alt="image-20210926155045222"></p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/9/26/20210926160220.png" alt="image-20210926155315585"></p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/9/26/20210926160224.png" alt="image-20210926155440381"></p><h3 id="重新备份和登录"><a href="#重新备份和登录" class="headerlink" title="重新备份和登录"></a>重新备份和登录</h3><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/9/26/20210926160228.png" alt="image-20210926155619130"></p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/9/26/20210926160231.png" alt="image-20210926155736722"></p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/9/26/20210926160235.png" alt="image-20210926155818849"></p><p><img src="https://nothinglin.coding.net/p/picture/d/picture/git/raw/master/2021/9/26/20210926160239.png" alt="image-20210926160013617"></p><p>所以到这里就差不多解决了这个问题了，为了防止以后还会出现这种情况，在这里以博客的形式记录下来了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;发现错误&quot;&gt;&lt;a href=&quot;#发现错误&quot; class=&quot;headerlink&quot; title=&quot;发现错误&quot;&gt;&lt;/a&gt;发现错误&lt;/h1&gt;&lt;p&gt;我在写hexo博客的时候一般都有一个备份的习惯，就在这次我完成了Nothinglin主题的开发时，将博客主题移至现在这个博客</summary>
      
    
    
    
    <category term="问题收集" scheme="https://www.nothinglin.ml/categories/%E9%97%AE%E9%A2%98%E6%94%B6%E9%9B%86/"/>
    
    
    <category term="github报错" scheme="https://www.nothinglin.ml/tags/github%E6%8A%A5%E9%94%99/"/>
    
  </entry>
  
  <entry>
    <title>博客主题 | Hexo-theme-coolshell主题开发感想</title>
    <link href="https://www.nothinglin.ml/2021/05/02/Hexo/Hexo%E4%B8%BB%E9%A2%98coolshell%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/"/>
    <id>https://www.nothinglin.ml/2021/05/02/Hexo/Hexo%E4%B8%BB%E9%A2%98coolshell%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</id>
    <published>2021-05-02T14:22:00.000Z</published>
    <updated>2022-01-08T19:02:50.407Z</updated>
    
    <content type="html"><![CDATA[<blockquote></blockquote><blockquote><p><strong>注意</strong>：</p><p>该主题是我开发的另一个不完善的hexo博客主题并非nothinglin主题。</p><p><a href="https://github.com/Nothing-lin/hexo-theme-coolshell">https://github.com/Nothing-lin/hexo-theme-coolshell</a></p></blockquote><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>截止至今天，CoolShell主题还处在完善当中，虽然现在我使用的主题就是我参考CoolShell官网开发的一套Hexo主题，但是我的主题代码还没有进行完善和优化，有许多的功能还未开发，所以还是一种比较不完善的状态当中。</p><p>我是因为在Hexo官网中找不到一个自己喜欢的主题，然而偶然进入陈皓前辈的官网中时，被前辈的博客主题样式给吸引了。整体给我的感觉就是非常简洁，很干净，很适合阅读。所以，我就非常希望能够有一个这样的主题，可以前辈的主题是power by wordpress的。目前来说，我并没有服务器，所以我只能搭建一些静态博客而已，但是又没办法，我是真的非常喜欢这个主题，于是就有了自己搭建一个hexo主题的想法。</p><p>其实这个想法并不是这个时候才有的，其实很早的时候就有了，大概是在大一那时候吧，那时候在B站观看了程序羊的博客搭建视频系列，于是之后就开始入坑博客了。对于我们学生党来说，静态博客是最实惠的，可惜的是但是不懂得进行博客速度的优化，还有一直很不满意现有主题库中的主题。于是大一的时候就将博客部署到gitee上就没再折腾了。</p><p>大二之后又开始接触Hexo博客，其实前段时间是准备放弃hexo的，因为我开始接触到了非常多的静态博客框架，比如Hugo、vuepress、Hexo、gitbook、Docusaurus、Pelican、Jekyll还有盖茨比等等这些博客框架。但是综合来说吧，Hexo的教程比较多还有就是主题选择也比较多，苦于不了解hexo的运行机制和接口罢了。</p><p>其实有很多的博客主题是改一改就能够满足自己的需求的，但是不会改，不懂得这个博客主题的接口设计。所以一直就没有过一个满意的博客主题，再到后来随着对前端知识的稍微深入理解，我开始学会了使用浏览器的开发者工具来进行前端代码CSS的调试之后，我开始具备改造博客主题的能力了，大概也就是四五个月前吧。</p><p>于是我就开始疯狂搜索有关hexo博客改造的博文进行参考和学习，其实大概知道怎么一回事之后，便开始有了想自己亲手创建一个主题的想法。忘记从哪里看到的一句话：</p><blockquote><p>“想要了解一只青蛙光是解剖还是不够的，你必须要去制造一只青蛙”</p></blockquote><p>改造博客主题其实是很容易的，其实大部分规范化开发的主题都是没有使用！important这个属性来声明CSS样式的，因为这样可以方便别人后面的修改，用于覆盖已经设置好的CSS属性，我就是这样子进行博客改造的，首先就是先使用开发者工具进行调试，将需要的样式调整好之后，再重新创建一个自定义css样式文件到主题开发文件夹theme的css文件夹中，并且在这个主题文件夹的头文件中将自定义css文件进行引入，然后对原css进行覆盖，如果覆盖不了的就使用！important属性来强制覆盖。</p><p>也就在一个月前，我对我的博客稍微满意的时候（使用的是fluid主题），我看到了CoolShell官网的主题，这下我对我原有的博客主题又开始不满意了。可能因为我太喜欢CoolShell这个主题了，所以我花了两三天的时间对博客主题开发进行研究，主要是调查两个方面：</p><ul><li>主题开发的难度大不大</li><li>主题开发的资料多不多</li></ul><p>好在我在谷歌搜索的时候，有许多前辈毫不吝啬地分享了他们hexo主题开发地经验和总结，他们也提醒了我hexo官网地主题开发说明文档还有建议最好是先多看现有地主题源码，看看别人是怎么实现博客功能的。</p><p>我觉得源码参考非常重要，我到主题官网中找了非常多的主题进行比对，最后我发现<code>hexo-theme-snippet</code>这个主题是对接近CoolShell的，并且使用的文件是EJS格式的文件，这样的话我也可以看得懂，因为EJS和HTML文件的格式是非常相近的。于是<code>hexo-theme-snippet</code>和hexo官方文档说明便是我的主题开发的一手资料。</p><p>其实想真正徒手开发难度是非常大的，比如很多样式排版、代码高亮、站内搜索功能、代码优化等等这些功能，像我这种只有一点前端基础能力的人是不可能做到徒手开发完整的主题功能的。好在其实在开发主题过程中是有非常多的插件给我们直接使用的，这样就大大节省了我们的开发成本。</p><p>比如，代码框高亮，就像你能够在我的博客文章中看到的代码块高亮的样式，是不是很炫酷？是不是跟CoolShell官网的样式一模一样？其实这个代码块高亮的样式是有现成的插件给我们使用的，只不过更倾向于wordpress这样的博客，对wordpress其实已经有了现成的插件，Hexo的话是没有的，我大概花了两三天的时间来对hexo博客进行对接Enlighter.js的接口。官网：<a href="https://github.com/EnlighterJS/EnlighterJS">Enlighter.js</a></p><p>能够发现这个插件也是多亏了开发者工具，我看见CoolShell官网中的源文件的名字是Enlighter.min.css，看到这个我立刻明白，这肯定是一款插件。照着名字取谷歌搜索了一下，果然发现了它是开源插件，当时可把我高兴坏了。</p><p>就这样我咬着牙坚持了半个多月的开发，终于初步完成了主题的整体架构。但是缺点却还是有非常多的，还有bug：</p><ul><li>还未支持手机端的响应式显示</li><li>代码整体呈现凌乱，配置文件接口还没配置</li><li>潜在的bug还有非常多，只是暂时还没发现</li></ul><h3 id="使用这个主题"><a href="#使用这个主题" class="headerlink" title="使用这个主题"></a>使用这个主题</h3><p>Hexo-theme-CoolShell还没有正式上线，如果目前你对这个主题感兴趣的话，我也非常欢迎大家使用，最好是能有小伙伴一起参与博客的完善。</p><p>官网：<a href="https://github.com/Nothing-lin/hexo-theme-coolshell">https://github.com/Nothing-lin/hexo-theme-coolshell</a></p><p>首先是把主题下载到本地中，在这里默认你已经会搭建Hexo博客了，并且知道如何更换Hexo主题。如果有小伙伴还不知道的话，我后期也会专门写一些我个人理解的教程给大家参考。</p><p>安装相关依赖</p><pre data-enlighter-language="bash">//这个是关于相关文章的插件，如果没有的话那么文章页面会进不去npm install hexo-related-popular-posts --save//这个是博客站内搜索引擎，如果没有的话就不能进行站内搜索npm hexo-generator-search --save</pre><pre data-enlighter-language="bash">//这个是关于静态资源文件的压缩，目的是为了能够优化hexo的访问速度npm hexo-neat --save</pre><p>对于neat这个插件需要在全局配置文件中添加：</p><pre data-enlighter-language="yml"># hexo-neat# md博文压缩neat_enable: true# 压缩html（ejs，swig等也属于html格式片段）neat_html:  enable: true  exclude:# 压缩cssneat_css:  enable: true  exclude:    - '*.min.css'    - '**/*.min.css'# 压缩jsneat_js:  enable: true  mangle: true #打印日志  output:  compress:  exclude: #排除文件    - '*.min.js'    - '**/*.min.js'</pre><p>还有的就是，对于全局配置文件中，我们需要把hexo的默认高亮代码给关闭，因为Enlighter.js和hexo的highlight是冲突的，所以我们需要关闭：</p><pre data-enlighter-language="yml">highlight:  enable: false  line_number: false  auto_detect: false  tab_replace: ''  wrap: false  hljs: falseprismjs:  enable: false  preprocess: false  line_number: false  tab_replace: ''</pre><p>所以，完成了上面的这些步骤之后，只要是按照正常流程更换hexo博客主题的，都能够正常显示主题的样式了。</p><blockquote><p>我想说的是，目前这个主题还处于初步完善阶段，还有非常多的bug和没有优化的地方，手机端更是没有响应式功能，目前我还在学习当中，并且更新速度也不会像以前那么快了，主要是慢慢进行完善，我现在也开始使用这个主题了。</p></blockquote><p>如果有小伙伴还不清楚如何搭建博客或者是如何使用我这个博客的话，大家可以再等一等哈，我后面知识积累的足够的时候我会写一些hexo系列的文章，如果大家有问题在留言中得不到回复的话，大家可以到我GitHub开放的issues上进行提问，我有时间并且能回复的我一定尽力回复，回复不了的也希望大家多多体谅。</p><blockquote><p><a href="https://github.com/Nothinglin-Study-Project/Open-Issues/issues">点击链接前往提问或留言</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;该主题是我开发的另一个不完善的hexo博客主题并非nothinglin主题。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github</summary>
      
    
    
    
    <category term="博客" scheme="https://www.nothinglin.ml/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="CoolShell主题说明" scheme="https://www.nothinglin.ml/tags/CoolShell%E4%B8%BB%E9%A2%98%E8%AF%B4%E6%98%8E/"/>
    
  </entry>
  
</feed>
